.\"	$OpenBSD: mdoc.template,v 1.15 2014/03/31 00:09:54 dlg Exp $
.\"
.\" Copyright (c) 2017 Kristaps Dzonsons <kristaps@bsd.lv>
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.Dd $Mdocdate: April 16 2017 $
.Dt KWEBAPP 5
.Os
.Sh NAME
.Nm kwebapp
.Nd syntax for kwebapp configuration
.Sh DESCRIPTION
The
.Nm
configuration is used by
.Xr kwebapp 1
to generate C source and header files that drive a database.
It is a free-form (white-space is not significant beyond separating
tokens) configuration language with the following rough structure:
.Bd -literal -offset indent
[ "struct" structname
  "{"
    [ "field" fielddata ";" ]+
    [ searchtype searchdata ";" ]*
    [ "update" updatedata ";" ]*
    [ "comment" quoted_string ";" ]?
  "}"
]+
.Ed
.Pp
In simple language, one or more structure definitions, each containing
one or more fields and auxiliary structure data (search and update
specifications, etc.).
In
.Nm ,
structures and fields are collectively called
.Dq objects ,
and constitute the data of the system.
A structure, documented in
.Sx Structures ,
is a database table or C struct; whereas a field is a column or a struct
member.
.Pp
In this document, an
.Dq identifier
is a case-insensitive alphanumeric non-empty string beginning with a
letter, and a string literal is a double-quoted string (where internal
double quotes may be escaped by a single preceding backslash).
.Ss Structures
A structure object defines a C structure or a database table.
It is the foundational type of
.Nm .
Its definition begins with the word
.Cm struct ,
then the unique identifier of the structure, then structure data within
the curly braces.
.Bd -literal -offset indent
"struct" structname
  "{"
    [ "field" fielddata ";" ]+
    [ searchtype searchdata ";" ]*
    [ "update" updatedata ";" ]*
    [ "comment" quoted_string ";" ]?
  "}"
.Ed
.Pp
Structures may be mapped into by other structures from referencing
fields, which are similar to foreign keys.
In SQL terms, this abstracts the notion of inner joins on foreign keys.
.Pp
The contained elements may consist of one or more
.Cm field
describing data fields (see
.Sx Fields ) ;
optionally a
.Cm comment
for describing the structure (see
.Sx Comments ) ;
zero or more
.Cm update
statements that define how rows may be updated (see
.Sx Updates ) ;
and zero or more
.Cm searchtype ,
which defines one of several search types on fields (see
.Sx Searches ) .
.Ss Fields
A field object defines a C structure member and/or a database column.
Each field consists of the word
.Cm field
followed by an identifier
.Cm name
and, optionally, a
.Cm type
then additional information.
.Bd -literal -offset indent
"field" [name | name:target] [ type [typeinfo]* ]? ";"
.Ed
.Pp
The
.Cm name
may either be a standalone identifier or a
.Dq foreign key
referencing a field in another structure by the structure and field
name.
In this case, the referenced field must be a
.Cm rowid .
.Pp
The
.Cm type ,
if specified,
may be one of
.Cm struct ,
.Cm int ,
.Cm password ,
or
.Cm text .
The latter three are
.Dq native
types mapping into 64-bit integers and character strings, respectively.
.Pp
The
.Cm password
field is special in that it converts an input password into a hash
before insertion into the database.
It also can properly search for password hashes by running the hash
verification after extraction.
Thus, there is a difference between a password field that is being
inserted or updated (as a password, which is hashed) and extracted using
a search (as a hash).
.Pp
The
.Cm struct
type has the full syntax of
.Bd -literal -offset indent
"struct" source:struct.field
.Ed
.Pp
This special type joins the field
.Cm source
to the target structure and field
.Cm struct.field .
It differs from native type foreign keys in that it will be joined on
database queries, while the native type is merely part of the
definition.
It is an error for a
.Cm struct
and native foreign key to reference different target fields.
.Pp
If unspecified, the type defaults to
.Cm int .
.Pp
The
.Cm typeinfo
may consist of the following:
.Bd -literal -offset indent
"rowid" | "null" | "unique" | "comment" quoted_string
.Ed
.Pp
The
.Cm rowid
means (in SQL terms) that the field is a primary key.
This is only available for the
.Cm int
type and may only appear for one field in a given structure.
The quoted comment string after
.Cm comment
documents the field.
A
.Cm unique
field is marked as having a unique SQL column value.
A
.Cm null
field accepts null values, and is only available for native types.
A
.Cm rowid
field may not also be
.Cm null .
.Ss Comments
Each
.Nm
object may be documented.
This documentation is reflected in the generated sources.
For the time being, documentation may be considered opaque text that may
not contain a double-quote character unless preceded by a backslash.
(The backslash is removed in output.)
.Pp
For the time being, white-space is handled by retaining the first
instance, then stripping subsequent white-space.
This might change.
.Ss Searches
There are three types of
.Cm searchtype
searches that may be defined to produce searching functions on
structures: search for individual rows (i.e., on a unique column),
generate a queue of responses, or call a function for each retrieved
result in an active query.
These use the
.Cm search ,
.Cm list ,
and
.Cm iterate
keywords, respectively.
.Pp
Searches are always by field, and may be followed by parameters:
.Bd -literal -offset indent
searchtype term [,term]* [":" [params]* ]? ";"
.Ed
.Pp
Here,
.Cm term
consists of the possibly-nested field names to search for and an
optional operator.
Nested fields are in dotted-notation:
.Bd -literal -offset indent
[structure.]*field [operator]?
.Ed
.Pp
This would produce functions searching the field
.Dq field
within the
.Cm struct
structures as listed.
Available operators are as follows:
.Bl -tag -width Ds
.It Dq eq
Equality: search function will be given an input value to check against.
.It Dq isnull
Check whether the field is null.
.It Dq notnull
Check whether the field is not null.
.El
.Pp
The search parameters are a series of key-value pairs:
.Bd -literal -offset indent
"name" searchname | "comment" string_literal
.Ed
.Pp
The
.Cm name
is a unique identifier used in the C API for the search function and the
.Cm comment
is included in the API comments for the function.
.Pp
.Em Note :
if you're searching (in any way) on a
.Cm password
field, the field is omitted from the initial search, then hash-verified
after being extracted from the database.
Thus, this doesn't have the same performance as a normal search.
.Ss Updates
Update statements define how the database will be updated.
By default, there are no update functions defined.
The syntax is as follows:
.Bd -literal -offset indent
"update" mfields ":" cfields [":" [params]* ]? ";"
.Ed
.Pp
Both
.Cm mfields
and
.Cm cfields
are a sequence of one or more comma-separated native-type fields in the
current structure.
The former refers to the fields that will be modified; the latter refers
to fields that will act as constraints.
In other words, modify fields constraint by
.Cm cfields
to contain the
.Cm cfields .
Usually, the former will be the
.Cm rowid
and the former will be any other fields.
.Pp
The optional parameters may be one of
.Bd -literal -offset indent
"name" updatename | "comment" string_literal
.Ed
.Pp
The
.Cm name
sets a unique name for the generated function, while
.Cm comment
is used for the API comments.
.Pp
.Em Note :
fields of type
.Cm password
are not allowed as
.Cm cfields
since they are not stored directly as comparable strings, but hashed
with a unique salt.
.Sh EXAMPLES
A simple session table is as follows:
.Bd -literal
struct user {
  field name text;
  field id int rowid;
  comment "A regular user.";
}

struct session {
  field user struct userid:user.id;
  field userid comment "Associated user.";
  field altuserid:user.id;
  field token comment "Random cookie.";
  field id int rowid;
  comment "Authenticated session.";
}
.Ed
.Pp
This generates two C structures,
.Li user
and
.Li session ,
consisting of the given fields.
The
.Li session
structure contains a
.Li struct user
as well; thus, there is a declarative order that
.Xr kwebapp 1
enforces when writing out structures.
.Pp
The SQL interface, when fetching a
.Li struct session ,
will employ an
.Li INNER JOIN
over the user identifier and session
.Li userid
field.
.Sh SEE ALSO
.Xr kwebapp 1
.\" .Sh STANDARDS
.\" .Sh HISTORY
.\" .Sh AUTHORS
.\" .Sh CAVEATS
.\" .Sh BUGS
