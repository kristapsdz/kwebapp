.\"	$OpenBSD: mdoc.template,v 1.15 2014/03/31 00:09:54 dlg Exp $
.\"
.\" Copyright (c) 2017 Kristaps Dzonsons <kristaps@bsd.lv>
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.Dd $Mdocdate: March 29 2017 $
.Dt KWEBAPP 5
.Os
.Sh NAME
.Nm kwebapp
.Nd syntax for kwebapp configuration
.Sh DESCRIPTION
The
.Nm
configuration is used by
.Xr kwebapp 1
to generate C source and header files that drive a database.
It is a free-form (white-space is not significant beyond separating
tokens) configuration language with the following rough structure:
.Bd -literal -offset indent
[ "struct" structname 
  "{"
    [ "field" fieldname [ type [ typeinfo ] ] ";" ]+
  "}"
]+
.Ed
.Pp
In simple language, one or more structure definitions, each containing
one or more fields.
A structure is a database table or C struct; whereas a field is a column
or a struct member.
The names of structures and fields must be case-sensitive alphanumeric
strings starting with a letter.
.Ss Structures
A structure defines a C structure or a database table.
Its definition begins with the word
.Cm struct ,
then the name of the structure, then a set of one or more
.Cm fields
within the curly braces.
.Bd -literal -offset indent
"struct" structname "{" [ fields ]+ "}"
.Ed
.Pp
Structures may be mapped into by other structures from referencing
fields, which are similar to foreign keys.
In SQL terms, this abstracts the notion of inner joins on foreign keys.
.Ss Fields
A field defines a C structure member and/or a database column.
Each field consists of the word
.Cm field
followed by a field
.Cm name
and
.Cm type ,
then additional information.
.Bd -literal -offset indent
"field" [name | name:target] type [typeinfo]+ ";" 
.Ed
.Pp
The
.Cm name
may either be a standalone identifier or a
.Dq foreign key
referencing a field in another structure.
The
.Cm type
may be one of
.Cm struct ,
.Cm int ,
or
.Cm text .
The latter two are
.Dq native
types mapping into 64-bit integers and character strings, respectively.
The former has the full syntax of
.Pp
.Dl \(dqstruct\(dq source:struct.field
.Pp
This special type joins the field
.Cm source
to the target structure and field
.Cm struct.field .
This special type differs from native type foreign keys in that it will
be joined on database queries, while the native type is merely part of
the definition.
It is an error (for now) to be both a foreign key type and part of a
.Cm struct
reference.
.Pp
The
.Cm typeinfo
for the time being may only consist of
.Cm rowid ,
meaning (in SQL terms) that the field is a primary key.
This is only available for native types.
.Sh EXAMPLES
A simple session table is as follows:
.Bd -literal
struct user {
  field name text;
  field id int rowid;
}

struct session { 
  field user struct userid:user.id;
  field userid;
  field altuserid:user.id;
  field token;
  field id int rowid;
}
.Ed
.Pp
This generates two C structures,
.Li user
and
.Li session ,
consisting of the given fields.
The
.Li session
structure contains a
.Li struct user
as well; thus, there is a declarative order that
.Xr kwebapp 1
enforces when writing out structures.
.Pp
The SQL interface, when fetching a
.Li struct session ,
will employ an
.Li INNER JOIN
over the user identifier and session
.Li userid
field.
.Sh SEE ALSO
.Xr kwebapp 1
.\" .Sh STANDARDS
.\" .Sh HISTORY
.\" .Sh AUTHORS
.\" .Sh CAVEATS
.\" .Sh BUGS
