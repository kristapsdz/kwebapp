.\"	$Id$
.\"
.\" Copyright (c) 2017 Kristaps Dzonsons <kristaps@bsd.lv>
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.Dd $Mdocdate: September 18 2017 $
.Dt KWEBAPP 5
.Os
.Sh NAME
.Nm kwebapp
.Nd syntax for kwebapp configuration
.Sh DESCRIPTION
The
.Nm
configuration is used by
.Xr kwebapp 1
to generate C source and header files that drive a database.
It is a free-form (white-space is not significant beyond separating
tokens) configuration language with the following rough structure:
.Bd -literal -offset indent
config :== [ enum | struct ]+
struct :== "struct" structname
  "{"
    [ "field" fielddata ";" ]+
    [ searchtype searchdata ";" ]*
    [ "update" updatedata ";" ]*
    [ "delete" deletedata ";" ]*
    [ "unique" uniquedata ";" ]*
    [ "comment" quoted_string ";" ]?
  "};"
enum :== "enum" enumname
  "{"
    [ "item" enumdata ";" ]+
    [ "comment" quoted_string ";" ]?
  "};"
.Ed
.Pp
In simple language, one or more structure definitions and zero or more
enumerations.
.Pp
Each structure containing one or more fields and auxiliary structure
data (search and update specifications, etc.).
In
.Nm ,
structures and fields are collectively called
.Dq objects ,
and constitute the data of the system.
A structure, documented in
.Sx Structures ,
is a database table or C struct; whereas a field is a column or a struct
member.
.Pp
Enumerations, documented in
.Sx Enumerations ,
define fixed constants used in field definitions.
They're used only for validation.
.Pp
In this document, an
.Dq identifier
is a case-insensitive alphanumeric non-empty string beginning with a
letter, and a string literal is a double-quoted string (where internal
double quotes may be escaped by a single preceding backslash).
.Ss Structures
A structure object defines a C structure or a database table.
It is the foundational type of
.Nm .
Its definition begins with the word
.Cm struct ,
then the unique identifier of the structure, then structure data within
the curly braces.
.Bd -literal -offset indent
"struct" structname
  "{"
    [ "field" fielddata ";" ]+
    [ searchtype searchdata ";" ]*
    [ "update" updatedata ";" ]*
    [ "delete" deletedata ";" ]*
    [ "unique" uniquedata ";" ]*
    [ "comment" quoted_string ";" ]?
  "};"
.Ed
.Pp
The contained elements may consist of one or more
.Cm field
describing data fields (see
.Sx Fields ) ;
optionally a
.Cm comment
for describing the structure (see
.Sx Comments ) ;
zero or more
.Cm update
or
.Cm delete
statements that define how rows may be updated and deleted (see
.Sx Updates ) ;
zero or more
.Cm unique
statements that create unique constraints on multiple fields (see
.Sx Uniques ) ;
and zero or more
.Cm searchtype ,
which defines one of several search types on fields (see
.Sx Searches ) .
.Ss Fields
A field object defines a C structure member and/or a database column.
Each field consists of the word
.Cm field
followed by an identifier
.Cm name
and, optionally, a
.Cm type
then additional information.
.Bd -literal -offset indent
"field" [name | name:target] [ type [typeinfo]* ]? ";"
.Ed
.Pp
The
.Cm name
may either be a standalone identifier or a
.Dq foreign key
referencing a field in another structure by the structure and field
name.
In this case, the referenced field must be a
.Cm rowid
or
.Cm unique ,
and have the same type.
.Pp
The
.Cm type ,
if specified,
may be one of the following:
.Bl -tag -width Ds
.It Cm struct Ar field
A non-native type filled in by joining the given
.Ar field
with its referent structure.
It cannot be a foreign key: instead, the
.Cm struct
keyword must be followed by the field name in the structure defining the
foreign key reference, which may not have the
.Cm null
attribute.
This type is
.Dq non-native
because it is not represented in the database schema, and is instead
filled in with the referenced row.
In the C API, this is represented by a
.Vt struct name
of the referent structure.
.It Cm real
Native type mapping into a double-precision float.
.It Cm blob
Native type mapping into a fixed-size binary buffer.
.It Cm int
Native type mapping into a 64-bit integer,
.Vt int64_t .
.It Cm enum
Native type mapping into a 64-bit integer, constrained to valid
enumeration values.
Represented in the C API as an
.Vt enum name ,
with the name as given.
See
.Sx Enumerations
for more documentation.
.It Cm epoch
Native type mapping into a 64-bit integer, constrained to valid
.Vt time_t
values and similarly represented in the C API.
.It Cm text
Native type mapping into a nil-terminated character string, usually
encoded in UTF-8.
.It Cm email
Native type mapping into a nil-terminated character string, constrained
to e-mail address format.
.It Cm password
Native type mapping into a nil-terminated character string.
This field is special in that it converts an input password into a hash
before insertion into the database.
It also can properly search for password hashes by running the hash
verification after extraction.
Thus, there is a difference between a password field that is being
inserted or updated (as a password, which is hashed) and extracted using
a search (as a hash).
.El
.Pp
The
.Cm typeinfo
may consist of the following:
.Bl -tag -width Ds
.It Cm rowid
The field is an SQL primary key.
This is only available for the
.Cm int
type and may only appear for one field in a given structure.
.It Cm null
Accepts null SQL or C values, and is only available for native types.
A
.Cm rowid
field may not also be
.Cm null .
.It Cm unique
Has a unique SQL column value.
.It Cm noexport
Never exported using the JSON interface.
This is useful for sensitive internal information.
.It Cm limit Ar limit_op limit_val
Used when generating validation functions.
Only available for native types.
The
.Ar limit_op
argument consists of an operator the
.Ar limit_val
is checked against.
Available operators are
.Ar ge ,
.Ar le ,
.Ar gt ,
.Ar lt ,
and
.Ar eq .
Respectively, these mean the field should be greater than or equal to,
less than or equal to, greater than, less than, or equal to the given
value.
If the field type is
.Cm text ,
.Cm email ,
.Cm password ,
or
.Cm blob ,
this refers to the string (or binary) length in bytes.
For numeric types, it's the value itself.
The given value must match the field type: an integer (which may be
signed) for integers, integer or real-valued for real, or a positive
integer for lengths.
.It Cm comment Ar quoted_string
Documents the field using the quoted string.
.It Cm actup Ar action
SQL actions taken when the field is updated.
May be one of
.Ar none
.Pq do nothing ,
.Ar restrict ,
.Pq disallow if having child referents ,
.Ar nullify
.Pq set child referents to null ,
.Ar cascade ,
.Pq propogate operation to referents ,
or
.Ar default
.Pq set child referents to their default values .
This is only available on foreign key references.
.It Cm actdel Ar action
Like
.Cm actup
but on deletion of the field in the database.
.El
.Pp
A field declaration may consist of any number of
.Cm typeinfo
statements.
.Ss Enumerations
Enumerations are top-level objects in
.Nm
and are used to create constant values or validation.
They are defined as follows:
.Bd -literal -offset indent
"enum" enumname
  "{"
    [ "item" name value [ comment quoted_string ]? ";" ]+
    [ "comment" quoted_string ";" ]?
  "};"
.Ed
.Pp
The enumeration
.Cm enumname
must be unique.
The
.Cm name
must be unique within an enumeration.
The
.Cm value
is the named constant's value expressed as an integer.
It must also be unique within the enumeration object.
.Ss Comments
Each
.Nm
object may be documented.
This documentation is reflected in the generated sources.
For the time being, documentation may be considered opaque text that may
not contain a double-quote character unless preceded by a backslash.
(The backslash is removed in output.)
.Pp
For the time being, white-space is handled by retaining the first
instance, then stripping subsequent white-space.
This might change.
.Ss Searches
There are three types of
.Cm searchtype
searches that may be defined to produce searching functions on
structures: search for individual rows (i.e., on a unique column),
generate a queue of responses, or call a function for each retrieved
result in an active query.
These use the
.Cm search ,
.Cm list ,
and
.Cm iterate
keywords, respectively.
.Pp
Searches are always by field, and may be followed by parameters:
.Bd -literal -offset indent
searchtype [term [,term]*]? [":" [params]* ]? ";"
.Ed
.Pp
Here,
.Cm term
consists of the possibly-nested field names to search for and an
optional operator.
(Searchers of type
.Cm search
require at least one field.)
Nested fields are in dotted-notation:
.Bd -literal -offset indent
[structure.]*field [operator]?
.Ed
.Pp
This would produce functions searching the field
.Dq field
within the
.Cm struct
structures as listed.
See
.Sx Operations
for a list of available operators.
.Pp
The search parameters are a series of key-value pairs:
.Bd -literal -offset indent
"name" searchname | "comment" string_literal
.Ed
.Pp
The
.Cm name
is a unique identifier used in the C API for the search function and the
.Cm comment
is included in the API comments for the function.
.Pp
.Em Note :
if you're searching (in any way) on a
.Cm password
field, the field is omitted from the initial search, then hash-verified
after being extracted from the database.
Thus, this doesn't have the same performance as a normal search.
.Ss Uniques
While individual fields may be marked
.Cm unique
on a per-column basis, multiple-column unique constraints may be
specified with the
.Cm unique
structure-level keyword.
The syntax is as follows:
.Bd -literal -offset indent
"unique" [fields]2+ ";"
.Ed
.Pp
The
.Cm fields
must be in the local structure, and must be native types.
There must be at least two fields in the statement.
There can be only one unique statement per combination of fields (in any
order).
.Ss Updates
Update statements (update and delete) define how the database will be
modified.
By default, there are no update or delete functions defined.
The syntax is as follows:
.Bd -literal -offset indent
"update" mfields ":" cfields [":" [params]* ]? ";"
"delete" cfields [":" [params]* ]? ";"
.Ed
.Pp
Both
.Cm mfields
and
.Cm cfields
are a sequence of one or more comma-separated native-type fields in the
current structure.
The former refers to the fields that will be modified; the latter refers
to fields that will act as constraints.
In other words, modify fields constraint by
.Cm cfields
to contain the
.Cm cfields .
(The
.Cm delete
statement obviously does not accept fields to modify.)
Usually, the latter will be the
.Cm rowid
and the former will be any other fields.
.Pp
The fields in
.Cm mfields
may also accept a modifier type that modifies the existing field instead
of setting it externally.
This is only available for numeric types and is described in
.Sx Modifiers .
Each field in
.Cm cfields
may also accept an optional operator type as described in
.Sx Operations .
.Bd -literal -offset indent
mfield [modifier]?
cfield [operator]?
.Ed
.Pp
The optional parameters may be one of
.Bd -literal -offset indent
"name" name | "comment" string_literal
.Ed
.Pp
The
.Cm name
sets a unique name for the generated function, while
.Cm comment
is used for the API comments.
.Pp
.Em Note :
fields of type
.Cm password
are not allowed as
.Cm cfields
since they are not stored directly as comparable strings, but hashed
with a unique salt.
.Ss Modifiers
When updating fields (see
.Sx Updates ) ,
it's possible to augment the existing field instead of setting it to an
input value.
The following augment operations are available, but only to numeric
types:
.Bl -tag -width Ds
.It Cm inc
Increment the current field by a given value (x = x + ?).
.It Cm dec
Decrement the current field by a given value (x = x - ?).
.El
.Pp
The
.Cm set
modifier stipulates the default behaviour of setting to a value.
.Ss Operations
When searching or updating (see
.Sx Searches
and
.Sx Updates ) ,
it's possible to provide several different ways of operating on fields.
By default, the operator is for equality: when generating functions, the
functions accept an input value that is checked against the stored
field.
These are specified as an optional term alongside a search field.
.Pp
What follows is a full list of operators:
.Bl -tag -width Ds
.It Cm eq , neq
Equality or non-equality binary operator.
The
.Cm eq
operator is the default.
.It Cm lt , gt
Less than or greater than binary operators.
For text, the comparison is lexical; otherwise, it is by value.
.It Cm le , ge
Less than/equality or greater than/equality binary operators.
For text, the comparison is lexical; otherwise, it is by value.
.It Cm isnull , notnull
Unary operator to check whether the field is null or not null.
.El
.Pp
.Em Note :
.Cm password
fields do not accept any operator but the default check for equality.
.Sh EXAMPLES
A trivial example is as follows:
.Bd -literal
struct user {
  field name text;
  field id int rowid;
  comment "A regular user.";
};

struct session {
  field user struct userid:user.id;
  field userid comment "Associated user.";
  field altuserid:user.id;
  field token comment "Random cookie.";
  field ctime epoch comment "Creation time.";
  field id int rowid;
  comment "Authenticated session.";
};
.Ed
.Pp
This generates two C structures,
.Li user
and
.Li session ,
consisting of the given fields.
The
.Li session
structure contains a
.Li struct user
as well; thus, there is a declarative order that
.Xr kwebapp 1
enforces when writing out structures.
.Pp
The SQL interface, when fetching a
.Li struct session ,
will employ an
.Li INNER JOIN
over the user identifier and session
.Li userid
field.
.Sh SEE ALSO
.Xr kwebapp 1
.\" .Sh STANDARDS
.\" .Sh HISTORY
.\" .Sh AUTHORS
.\" .Sh CAVEATS
.\" .Sh BUGS
