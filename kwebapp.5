.\"	$Id$
.\"
.\" Copyright (c) 2017, 2018 Kristaps Dzonsons <kristaps@bsd.lv>
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.Dd $Mdocdate$
.Dt KWEBAPP 5
.Os
.Sh NAME
.Nm kwebapp
.Nd syntax for kwebapp configuration
.Sh DESCRIPTION
The
.Nm
configuration is used by the
.Xr kwebapp 1
family to define an application's data types; the data itself; how
the data is created, modified, and deleted; and how the data is queried.
.Pp
Configurations usually have one or more structures, zero or more
enumerations and bitfields (types), and possibly a role definition.
.Bd -literal -offset indent
config :== [ enum | bitfield | struct ]+ [ roles ]?
roles :== "roles" "{"
  [ "role" roledata ";" ]+
"};"
struct :== "struct" structname "{"
  [ "comment" string_literal ";" ]?
  [ "delete" deletedata ";" ]*
  [ "field" fielddata ";" ]+
  [ "insert" ";" ]*
  [ "iterate" searchdata ";" ]*
  [ "list" searchdata ";" ]*
  [ "roles" roledata ";" ]*
  [ "search" searchdata ";" ]*
  [ "unique" uniquedata ";" ]*
  [ "update" updatedata ";" ]*
"};"
enum :== "enum" enumname "{"
  [ "comment" string_literal ";" ]?
  [ "item" enumdata ";" ]+
"};"
bitfield :== "bits" bitsname "{"
  [ "comment" string_literal ";" ]?
  [ "item" bitsdata ";" ]+
  [ "isunset" label ";" ]+
  [ "isnull" label ";" ]+
"};"
.Ed
.Pp
Structures describe data structures and operations on the data (queries,
insertions, updates, deletions).
The data is arranged in fields describing data types, validation
constraints, and so on.
.Pp
Types consist of enumerations and bit-fields.
Enumerations define fixed constants used in data field definitions.
Bit-fields are similar, except that they describe bits set within an
single value.
Both are used only for validation and for formatting output data.
.Pp
Lastly, roles stipulate the use of role-based access control on data
operations.
.Pp
Collectively, these are called a configuration's
.Dq objects .
.Sh SYNTAX
In
.Nm ,
white-space serves only to separate tokens: it is discarded
except as found within quoted literals.
Thus, the following are identical except for the name:
.Bd -literal -offset indent
struct foo {
  field id int rowid;
};

struct bar{field id int rowid;};
.Ed
.Pp
Except for the content of string literals, a
.Nm
configuration only recognises ASCII characters.
.Ss Identifiers
Objects are generally named by an identifier.
These are always case-insensitive alphanumeric non-empty string
beginning with a letter.
There are many disallowed or reserved identifiers.
There are also unique name constraints to consider (e.g., no two
structures can have the same name, etc.).
.Pp
An example identifier:
.Bd -literal -offset indent
enum foobar { ... };
.Ed
.Pp
A non-confirming identifier may be:
.Bd -literal -offset indent
enum foo_bar { ... };
.Ed
.Ss String literals
Another comment syntactic element is the string literal: a double-quoted
string where internal double quotes may be escaped by a single preceding
backslash.
.Bd -literal -offset indent
struct ident { field id int comment "\e"Literal\e"."; };
.Ed
.Ss Comments
Document comments are begun by the hash mark
.Pq Dq #
and extend to the end of the line.
.Bd -literal -offset indent
# This is my structure.

struct ident {
  field id int comment "\e"Literal\e"."; # End of line.
};
.Ed
.Pp
They are always discarded and not considered part of the parsed
configuration file.
.Ss Numbers
Both decimal and integral numbers are recognised.
Integral numbers are signed and limited to 64 bits and formatted as
.Li [-]?[0-9]+ .
Decimal numbers are similarly formatted as
.Li [-]?[0-9]+.[0-9]* .
The difference between the two is the existence of the decimal.
.Ss Ordering
There are no ordering constraints on objects: all linkage between
components (e.g., referenced fields, roles, types, etc.) occurs after
parsing the document.
.Sh STRUCTURES
A structure consists of data definitions, operations, and access.
It begins with
.Cm struct ,
then the unique identifier of the structure, then elements within the
curly braces.
.Bd -literal -offset indent
"struct" structname "{"
  [ "comment" string_literal ";" ]?
  [ "delete" deletedata ";" ]*
  [ "field" fielddata ";" ]+
  [ "insert" ";" ]?
  [ "iterate" searchdata ";" ]*
  [ "list" searchdata ";" ]*
  [ "roles" roledata ";" ]*
  [ "search" searchdata ";" ]*
  [ "unique" uniquedata ";" ]*
  [ "update" updatedata ";" ]*
"};"
.Ed
.Pp
The elements may consist of one or more
.Cm field
describing data fields; optionally a
.Cm comment
for describing the structure;
zero or more
.Cm update ,
.Cm delete ,
or
.Cm insert
statements that define data modification;
zero or more
.Cm unique
statements that create unique constraints on multiple fields;
and zero or more
.Cm list ,
.Cm iterate ,
or
.Cm search
for querying data; and zero or more
.Cm roles
statements enumerating role-based access control.
.Ss Comments
A comment is a string literal describing the entire structure.
.Bd -literal -offset indent
struct foo {
  field name text;
  comment "A foo widget.";
};
.Ed
.Ss Queries
Query data with the
.Cm search
keyword to return an individual row (i.e., on a unique column or with a
.Cm limit
of one), the
.Cm list
keyword for retrieving multiple results in an array, or the
.Cm iterate
keyword for iterating over each result as it's returned.
.Pp
Queries are always by field and may be followed by parameters:
.Bd -literal -offset indent
"struct" name "{"
  [ "search" [term ["," term]*]? [":" [parms]* ]? ";" ]*
  [ "list" [term ["," term]*]? [":" [parms]* ]? ";" ]*
  [ "iterate" [term ["," term]*]? [":" [parms]* ]? ";" ]*
"};"
.Ed
.Pp
Here,
.Cm term
consists of the possibly-nested field names to search for and an
optional operator.
(Searchers of type
.Cm search
require at least one field.)
Nested fields are in dotted-notation:
.Bd -literal -offset indent
[structure "."]*field [operator]?
.Ed
.Pp
This would produce functions searching the field
.Dq field
within the
.Cm struct
structures as listed.
The following operators may be used:
.Bl -tag -width Ds -offset indent
.It Cm and , or
Logical AND
.Pq \&&
and logical OR
.Pq \&| ,
respectively.
.It Cm eq , neq
Equality or non-equality binary operator.
The
.Cm eq
operator is the default.
.It Cm lt , gt
Less than or greater than binary operators.
For text, the comparison is lexical; otherwise, it is by value.
.It Cm le , ge
Less than/equality or greater than/equality binary operators.
For text, the comparison is lexical; otherwise, it is by value.
.It Cm like
The LIKE SQL operator.
This only applies to
.Cm text
and
.Cm email
fields.
.It Cm isnull , notnull
Unary operator to check whether the field is null or not null.
.El
.Pp
The
.Cm password
field does not accept any operator but the default check for equality.
.Pp
The
.Cm parms
search parameters are a series of key-value pairs:
.Bd -literal -offset indent
"comment" string_literal
"distinct" ["." | [field ["." field]*]]
"limit" limitval["," offsetval]?
"name" searchname
"order" term [type]? ["," term [type]?]*
"group" term ["," term]*
["min" | "max"] term ["," term]*
.Ed
.Pp
The available parameter keys are as follows:
.Bl -tag -width Ds -offset indent
.It Cm comment
String literal included in the API comments for the function.
.It Cm limit
A value >0 that limits the number of returned results.
By default, there is no limit.
This can be used in a
.Cm search
singleton result statement as a way to limit non-unique results to a
single result.
If followed by a comma, the next term is used to offset the query.
This is usually used to page through results.
.It Cm distinct
Return only distinct rows.
If only a period
.Pq Dq \&.
follows the keyword, then the distinct applies to the entire returned
structure.
If a nested structure follows the keyword, only distinct rows of the
given structure are returned by the search operation.
This does not work with
.Cm null
structures; and moreover, disallows searching by fields of type
.Cm password .
.It Cm name
A unique identifier used in the C API for the search function.
.It Cm order
Result ordering.
The
.Cm term ,
like the search term, consists of order fields with periods indicating
fields nested within structures.
Each term may be followed by an order direction:
.Cm asc
for ascending and
.Cm desc
for descending.
Result ordering is applied from left-to-right.
.It Cm max , min
Return the maximum or minimum value instead of the value itself.
This is known as an
.Qq aggregation function
and is usually used with the
.Cm group
keyword.
.It Cm group
Groups results by the given column.
This collapses all rows with the same value for the given column into a
single row.
It is usually used with the
.Cm max
or
.Cm min
keyword.
.El
.Pp
If you're searching (in any way) on a
.Cm password
field, the field is omitted from the initial search, then hash-verified
after being extracted from the database.
Thus, this doesn't have the same performance as a normal search.
.Ss Roles
Limit role access with the
.Cm roles
keyword as follows:
.Bd -literal -offset indent
"struct" name "{"
  [ "roles" role ["," role]* "{" roletype [name]? "};" ]*
"};"
.Ed
.Pp
The
.Cm role
is a list of roles as defined in the top-level block, or one of the
reserved roles but for
.Cm none ,
which can never be assigned.
The role may be one of the following types:
.Bl -tag -width Ds -offset indent
.It Cm all
A special type referring to all function types.
.It Cm delete Ar name
The named delete operation.
.It Cm insert
The insert operation.
.It Cm iterate Ar name
The named iterate operation.
.It Cm list Ar name
The named list operation.
.It Cm noexport Op Ar name
Do not export the field
.Ar name
via the JSON export routines.
If no name is given, don't export any fields.
.It Cm search Ar name
The named search operation.
.It Cm update Ar name
The name update operation.
.El
.Pp
To refer to an operation, use its
.Cm name .
The only way to refer to un-named operations is to use
.Cm all ,
which refers to all operations (i.e., all types but
.Cm noexport ) .
.Pp
If, during run-time, the current role is not a subtype (inclusive) of
the given role for an operation, the application is immediately
terminated.
.Ss Updates
Data modifiers.
These begin with the
.Cm update ,
.Cm delete ,
or
.Cm insert
keyword.
By default, there are no update, delete, or insert functions defined.
The syntax is as follows:
.Bd -literal -offset indent
"struct" name "{"
  [ "update" [mflds]* [":" [cflds]* [":" [parms]* ]? ]? ";" ]*
  [ "delete" [cflds]* [":" [parms]* ]? ";" ]*
  [ "insert" ";" ]?
"};"
.Ed
.Pp
Both
.Cm mflds
and
.Cm cflds
are a sequence of comma-separated native-type fields in the current
structure followed by operators.
The former refers to the fields that will be modified; the latter refers
to fields that will act as constraints.
.Pp
The
.Cm delete
statement obviously does not accept fields to modify
.Pq Cm mflds .
If the
.Cm update
statement does not have
.Cm mflds ,
it's taken to mean that all fields will be modified using the default
modifier.
.Pp
Fields of type
.Cm password
are not allowed as
.Cm cflds
since they are not stored directly as comparable strings, but hashed
with a unique salt.
.Pp
Each field type has its own operators.
.Bd -literal -offset indent
mflds :== mfld [modify_operator]?
cflds :== cfld [constraint_operator]?
.Ed
.Pp
The fields in
.Cm mflds
accept an optional modifier that modifies the existing field instead
of setting it externally.
.Bl -tag -width Ds -offset indent
.It Cm concat
String concatenate the current field by a given value (x = x || ?).
.It Cm inc
Increment the current field by a given value (x = x + ?).
.It Cm dec
Decrement the current field by a given value (x = x - ?).
.It Cm set
Default behaviour of setting to a value (x = ?).
.El
.Pp
The
.Cm cflds
accept an optional operator type as described for
.Sx Queries .
.Pp
The
.Cm parms
are an optional series of key-value pairs consisting of the following:
.Bd -literal -offset indent
"comment" string_literal
"name" name
.Ed
.Pp
The
.Cm name
sets a unique name for the generated function, while
.Cm comment
is used for the API comments.
.Ss Uniques
While individual fields may be marked
.Cm unique
on a per-column basis, multiple-column unique constraints may be
specified with the
.Cm unique
structure-level keyword.
The syntax is as follows:
.Bd -literal -offset indent
"unique" field ["," field]+ ";"
.Ed
.Pp
Each
.Cm field
must be in the local structure, and must be native types.
There must be at least two fields in the statement.
There can be only one unique statement per combination of fields (in any
order).
.Pp
For example, consider a request for something involving two parties,
where the pair requesting must be unique.
.Bd -literal -offset indent
struct request {
  field userid:user.id int;
  field ownerid:user.id int;
  unique userid, ownerid;
};
.Ed
.Pp
This stipulates that adding the same pair will result in a constraint
failure.
.Ss Fields
Data specification beginning with the
.Cm field
keyword.
Each field consists of the word
.Cm field
followed by an identifier
.Cm name
and, optionally, a
.Cm type
then additional information.
.Bd -literal -offset indent
"field" name[":" target]? [type [typeinfo]*]? ";"
.Ed
.Pp
The
.Cm name
may either be a standalone identifier or a
.Dq foreign key
referencing a field in another structure by the structure and field
name.
In this case, the referenced field must be a
.Cm rowid
or
.Cm unique
and have the same type.
.Pp
The
.Cm type ,
if specified,
may be one of the following:
.Bl -tag -width Ds -offset indent
.It Cm bit
Native integer constained to 64-bit bit index (that is, 0\(en64).
The bit indices start from 1 in order to represent a zero value (no bits
to set).
Each non-zero value is usually merged into a bit-field by setting
.Li 1u << (value - 1)
for some input or output value.
For entire bitfields, see
.Cm bits .
.It Cm bits Ar name
Native type mapping into a 64-bit integer, constrained to valid
bitfield
.Ar name .
.It Cm blob
Native type mapping into a fixed-size binary buffer.
.It Cm email
Native type mapping into a nil-terminated character string, constrained
to e-mail address format.
.It Cm enum Ar name
Native type mapping into a 64-bit integer, constrained to valid
enumeration values of
.Ar name .
.It Cm int
Native type mapping into a 64-bit integer,
.Vt int64_t .
.It Cm password
Native type mapping into a nil-terminated character string.
This field is special in that it converts an input password into a hash
before insertion into the database.
It also can properly search for password hashes by running the hash
verification after extraction.
Thus, there is a difference between a password field that is being
inserted or updated (as a password, which is hashed) and extracted using
a search (as a hash).
.It Cm real
Native type mapping into a double-precision float.
.It Cm epoch
Native type mapping into a 64-bit integer, constrained to valid
.Vt time_t
values and similarly represented in the C API.
The
.Cm date
alias is also available, which is the same but using a date (ISO 8601)
sequence input validator.
.It Cm struct Ar field
A non-native type filled in by joining the given
.Ar field
with its referent structure.
This type is
.Dq non-native
because it is not represented in the database schema, and is instead
filled in with the referenced row.
In the C API, this is represented by a
.Vt struct name
of the referent structure.
The
.Ar field
may be marked with
.Cm null ,
but this involves a not-inconsiderable performance hit when querying
(directly or indirectly) on the structure.
.It Cm text
Native type mapping into a nil-terminated character string, usually
encoded in UTF-8.
.El
.Pp
The
.Cm typeinfo
provides further information (or operations) regarding the field, and
may consist of the following:
.Bl -tag -width Ds -offset indent
.It Cm actdel Ar action
Like
.Cm actup
but on deletion of the field in the database.
.It Cm actup Ar action
SQL actions taken when the field is updated.
May be one of
.Ar none
.Pq do nothing ,
.Ar restrict ,
.Pq disallow if having child referents ,
.Ar nullify
.Pq set child referents to null ,
.Ar cascade ,
.Pq propogate operation to referents ,
or
.Ar default
.Pq set child referents to their default values .
This is only available on foreign key references.
.It Cm comment Ar string_literal
Documents the field using the quoted string.
.It Cm default Ar integer|decimal|date|string_literal
Set a default value for the column that's used
.Em only
when adding columns to the SQL schema via
.Xr kwebapp-sqldiff 1 .
It's only valid for numeric, date, or string literal (email, text) field
types.
Dates must be in yyyy-mm-dd format.
.It Cm limit Ar limit_op limit_val
Used when generating validation functions.
Only available for native types.
The
.Ar limit_op
argument consists of an operator the
.Ar limit_val
is checked against.
Available operators are
.Ar ge ,
.Ar le ,
.Ar gt ,
.Ar lt ,
and
.Ar eq .
Respectively, these mean the field should be greater than or equal to,
less than or equal to, greater than, less than, or equal to the given
value.
If the field type is
.Cm text ,
.Cm email ,
.Cm password ,
or
.Cm blob ,
this refers to the string (or binary) length in bytes.
For numeric types, it's the value itself.
The given value must match the field type: an integer (which may be
signed) for integers, integer or real-valued for real, or a positive
integer for lengths.
.It Cm noexport
Never exported using the JSON interface.
This is useful for sensitive internal information.
Fields with type
.Cm password
are never exported by default.
.It Cm null
Accepts null SQL or C values, and is only available for native types.
A
.Cm rowid
field may not also be
.Cm null .
.It Cm rowid
The field is an SQL primary key.
This is only available for the
.Cm int
type and may only appear for one field in a given structure.
.It Cm unique
Has a unique SQL column value.
.El
.Pp
A field declaration may consist of any number of
.Cm typeinfo
statements.
.Sh TYPES
To provide more strong typing for data,
.Nm
provides enumerations and bit-field types.
These are used only for validating data input.
.Ss Enumerations
Enumerations constrain an
.Cm int
field type to a specific set of constant values.
They are defined as follows:
.Bd -literal -offset indent
"enum" enumname "{"
  [ "comment" string_literal ";" ]?
  [ "item" name [value]? [parms]* ";" ]+
"};"
.Ed
.Pp
For example,
.Bd -literal -offset indent
enum enumname {
  item "val1" 1 jslabel "Value one";
};
.Ed
.Pp
The enumeration name must be unique among all enumerations, bitfields,
and structures.
.Pp
Items define enumeration item names, their constant values (if set), and
documentation.
Each item's
.Cm name
must be unique within an enumeration.
The
.Cm value
is the named constant's value expressed as an integer.
It must also be unique within the enumeration object.
If not specified, it is assigned as one more than the maximum of the
assigned values or zero, whichever is larger.
Automatic assignment is linear and in the order specified in the
configuration.
Parameters may be any of the following:
.Bd -literal -offset indent
"comment" string_literal
label
.Ed
.Pp
The item's
.Cm comment
is used to document the field, while its label
.Pq see Sx Labels
is used only for formatting output.
.Pp
The above enumeration would be used in an example field definition as
follows:
.Bd -literal -offset indent
field foo enum enumname;
.Ed
.Pp
This would constrain validation routines to only recognise values
defined for the enumeration.
.Ss Bitfields
Like enumerations, bitfields constrain an
.Cm int
field type to a bit-wise mask of constant values.
They are defined as follows:
.Bd -literal -offset indent
"bits" bitsname "{"
  [ "comment" string_literal ";" ]?
  [ "item" name bitidx [parms]* ";" ]+
  [ "unset" label ";" ]+
"};"
.Ed
.Pp
For example,
.Bd -literal -offset indent
bits bitsname {
  item "bit1" 0 jslabel "Bit one";
  isunset jslabel "No bits";
};
.Ed
.Pp
The name must be unique among all enumerations, structures, and other
bitfields.
.Pp
Items define bits, their values, and documentation.
Each item's
.Cm name
must be unique within a bitfield.
The
.Cm value
is the named constant's bit index from zero, so a value of zero refers
to the first bit, one to the second bit, and so on.
Each must be unique within the bitfield.
Parameters may be any of the following:
.Bd -literal -offset indent
"comment" string_literal
label
.Ed
.Pp
The item's
.Cm comment
is used to document the field, while its label
.Pq see Sx Labels
is used only for formatting output.
.Pp
The above bitfield would be used in an example field definition as
follows:
.Bd -literal -offset indent
field foo bits bitsname;
.Ed
.Pp
The bitfield's
.Cm comment
is passed into the output media, and the
.Cm isunset
statement serves to provide a label
.Pq see Sx Labels
for when no bits are set (i.e., the field evaluates to zero).
.Ss Labels
Labels specify how
.Cm bits
and
.Cm enum
types and their items may be described by a front-end formatter such as
.Xr kwebapp-javascript 1 .
That is, while the string value of a
.Cm struct
item describes itself, an
.Cm enum
maps to a numeric value that needs to be translated into a meaningful
format.
Labels export string representations of the internal numeric value to
the front-end formatters.
.Pp
The syntax is as follows:
.Bd -literal -offset indent
"jslabel" ["." lang]? quoted_string
.Ed
.Pp
The
.Cm lang
token is usually an ISO 639-1 code, but may be any identifier.
If the
.Cm lang
is not specified, the label is considered to be the default label.
.Pp
If a label is not specified for a given language, it inherits the
default label.
If the default label is not provided, it is an empty string.
.Sh ROLES
Full role-based access control is available in
.Nm
when a top-level
.Cm roles
block is defined.
.Bd -literal -offset indent
"roles" "{"
   [ "role" name [parms] ["{" "role" name... ";" "}"]* ";" ]*
"};"
.Ed
.Pp
This nested structure defines the role tree.
Roles descendent of roles are called sub-roles.
.Pp
By defining
.Cm roles ,
even if left empty, the system will switch into default-deny access
control mode, and each function in
.Sx Structures
must be associated with one or more roles to be used.
.Pp
There are three reserved roles:
.Cm default ,
.Cm none ,
and
.Cm all .
These need not be specified in the
.Cm roles
statement.
The first may be used for the initial state of the system (before a role
has been explicitly assigned), the second refers to the empty role that
can do nothing, and the third contains all explicitly-defined roles.
.Pp
Each role may be associated with parameters limited to:
.Bd -literal -offset indent
"role" name ["comment" quoted_string]?
.Ed
.Pp
The
.Cm comment
field is only produced for role documentation.
.Sh EXAMPLES
A trivial example is as follows:
.Bd -literal
struct user {
  field name text;
  field id int rowid;
  comment "A regular user.";
};

struct session {
  field user struct userid;
  field userid:user.id comment "Associated user.";
  field token int comment "Random cookie.";
  field ctime epoch comment "Creation time.";
  field id int rowid;
  comment "Authenticated session.";
};
.Ed
.Pp
This generates two C structures,
.Li user
and
.Li session ,
consisting of the given fields.
The
.Li session
structure contains a
.Li struct user
as well; thus, there is a declarative order that
.Xr kwebapp 1
enforces when writing out structures.
.Pp
The SQL interface, when fetching a
.Li struct session ,
will employ an
.Li INNER JOIN
over the user identifier and session
.Li userid
field.
.Sh SEE ALSO
.Xr kwebapp 1
.\" .Sh STANDARDS
.\" .Sh HISTORY
.\" .Sh AUTHORS
.\" .Sh CAVEATS
.\" .Sh BUGS
