.\"	$Id$
.\"
.\" Copyright (c) 2020 Kristaps Dzonsons <kristaps@bsd.lv>
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.Dd $Mdocdate$
.Dt ORT 3
.Os
.Sh NAME
.Nm ort
.Nd ort code generator library
.Sh SYNOPSIS
.In sys/queue.h
.In stdio.h
.In ort.h
.Vt struct config
.Sh DESCRIPTION
In this documentation, all structures ending in
.Qq q ,
such as
.Qq struct bitidxq ,
are represented as tail-queue macros in
.In sys/queue.h .
.Pp
The central structure of
.Nm ort
is
.Vt struct config ,
which represents one or more configuration files.
It is generated by the final call to
.Xr ort_parse_close 3 .
.Bl -tag -width Ds -offset indent
.It Va struct strctq sq
A non-empty queue of structures.
.It Va struct enmq eq
A possibly-empty queue of user-defined enumerations.
.It Va struct bitfq bq
A possibly-empty queue of user-defined bitfields.
.It Va struct roleq rq
A possibly-empty queue of roles.
If empty, role-sensitive code should not be produced.
.It Va char **langs
All languages used by the exported labels.
.It Va size_t langsz
Number of pointers in
.Va langs .
If zero, there are no languages exported.
.It Va char **fnames
Filenames of parsed configurations.
These should only be used for reporting.
.It Va size_t fnamesz
The number of pointers in
.Va fnames .
.It Va struct msg *msgs
Warnings and errors encountered during parse.
.It Va size_t msgsz
The number of structures in
.Fa msgs .
.El
.Pp
The user-defined enumerations in
.Va eq
limit integer types to specific values.
Its
.Vt struct enm
is defined as follows:
.Bl -tag -width Ds -offset indent
.It Va char *name
The non-empty name of the enumeration.
It is unique (case insensitive) among all enumerations and bit-fields.
.It Va char *doc
If not
.Dv NULL ,
free-form documentation.
.It Va struct pos pos
Parse position.
.It Va struct eitemq eq
Non-empty list of all enumeration values.
.El
.Pp
Each enumeration has a non-empty list of
.Vt struct eitem
that define the enumeration's values.
.Bl -tag -width Ds -offset indent
.It Va char *name
The non-empty name of the enumeration item.
It is unique (case insensitive) among other items in the enumeration.
.It Va int64_t value
The value less than
.Dv INT64_MAX
and greater than
.Dv INT64_MIN .
It is unique among other items in the enumeration.
.It Va char *doc
If not
.Dv NULL ,
free-form documentation.
.It Va struct labelq labels
A possibly-empty list of exported labels describing the item.
.It Va struct pos pos
Parse position.
.It Va struct enm *parent
The encompassing enumeration.
.It Va unsigned int flags
Flags.
May be set to
.Dv EITEM_AUTO
if the
.Va value
was assigned dynamically.
Dynamic assignment occurs after parsing and works by taking the maximum
assigned value (bound below at zero), adding one, then assigning and
adding one in the order of declaration.
.El
.Pp
The label queue of
.Vt struct label
is exported, so its contents must be considered public.
It consists of names for each item.
.Bl -tag -width Ds -offset indent
.It Va char *label
The non-empty free-form label.
It may not contain the
.Qq <
left right-angle bracket.
.It Va size_t lang
Language index in
.Va lang
of
.Vt struct config .
.It Va struct pos pos
Parse position.
.El
.Pp
The user-defined bit-field
.Vt struct bitf
is similar to an enumeration:
.Bl -tag -width Ds -offset indent
.It Va char *name
The non-empty name of the bit-field.
It is unique (case insensitive) among other bit-fields and enumerations.
.It Va char *doc
If not
.Dv NULL ,
free-form documentation.
.It Va struct labelq labels_unset
A possibly-empty list of exported labels for formatting if the bit-field
has no bits set.
.It Va struct labelq labels_null
A possibly-empty list of exported labels for formatting if the bit-field
is null.
.It Va struct pos pos
Parse position.
.It Va struct bitidxq bq
A non-empty queue of bit values.
.El
.Pp
The bit-field is composed of multiple
.Vt struct bitidx
bits that are recognised by the application.
.Bl -tag -width Ds -offset indent
.It Va char *name
The non-empty name of the bit.
It is unique (case insensitive) among other bits in the bit-field.
.It Va char *doc
If not
.Dv NULL ,
free-form documentation.
.It Va struct labelq labels
A possibly-empty list of exported labels for formatting the bit.
.It Va int64_t values
The bit itself inclusive of 0\(en63.
.It Va struct bitf *parent
The parent bit-field structure.
.It Va struct pos pos
Parse position.
.El
.Pp
The role-based access control of the system is defined by
.Vt struct role .
If the queue in the top-level
.Vt struct config
is emtpy, there are no roles defined.
This should not change a generated API.
Roles are hierarchical, so the roles in
.Vt struct config
are top-level roles.
Roles inherit the operations (defined by
.Vt struct rolemap )
available to the parent.
.Bl -tag -width Ds -offset indent
.It Va char *name
The non-empty name of the role.
It is unique (case insensitive) among other roles.
.It Va char *doc
If not
.Dv NULL ,
free-form documentation.
.It Va struct role *parent
The parent role.
If
.Dv NULL ,
this is a top-level role.
.It Va struct roleq subrq
A possibly-empty queue of inheriting roles.
.It Va struct pos pos
Parse position.
.El
.\" The following requests should be uncommented and used where appropriate.
.\" .Sh CONTEXT
.\" For section 9 functions only.
.\" .Sh RETURN VALUES
.\" For sections 2, 3, and 9 function return values only.
.\" .Sh ENVIRONMENT
.\" For sections 1, 6, 7, and 8 only.
.\" .Sh FILES
.\" .Sh EXIT STATUS
.\" For sections 1, 6, and 8 only.
.\" .Sh EXAMPLES
.\" .Sh DIAGNOSTICS
.\" For sections 1, 4, 6, 7, 8, and 9 printf/stderr messages only.
.\" .Sh ERRORS
.\" For sections 2, 3, 4, and 9 errno settings only.
.\" .Sh SEE ALSO
.\" .Xr foobar 1
.\" .Sh STANDARDS
.\" .Sh HISTORY
.\" .Sh AUTHORS
.\" .Sh CAVEATS
.\" .Sh BUGS
