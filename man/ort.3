.\"	$Id$
.\"
.\" Copyright (c) 2020 Kristaps Dzonsons <kristaps@bsd.lv>
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.Dd $Mdocdate$
.Dt ORT 3
.Os
.Sh NAME
.Nm ort
.Nd ort code generator library
.Sh SYNOPSIS
.In sys/queue.h
.In stdio.h
.In ort.h
.Vt struct bitf
.Vt struct bitidx
.Vt struct config
.Vt struct eitem
.Vt struct enm
.Vt struct label
.Vt struct role
.Vt struct rolemap
.Vt struct strct
.Sh DESCRIPTION
The
.Nm
library parses
.Xr ort 5
configuration files.
The most common usage is as follows:
.Bl -enum
.It
create a configuration with
.Xr ort_config_alloc 3
.It
parse one or multiple files with
.Xr ort_parse_file 3
.It
finalise the configuration with
.Xr ort_parse_close 3
.It
manipulate the configuration
.It
free the configuration with
.Xr ort_config_free 3
.El
.Ss Pledge Promises
The
.Nm
library is built to operate in security-sensitive environments, including
.Xr pledge 2
on
.Ox .
The only promise required is
.Qq stdio .
.Sh DATA STRUCTURES
In this documentation, all structures ending in
.Qq q ,
such as
.Qq struct bitidxq ,
are represented as tail-queue macros in
.In sys/queue.h .
.Pp
The central structure of
.Nm ort
is
.Vt struct config ,
which represents one or more configuration files.
It is allocated with
.Xr ort_config_alloc 3 ,
filled with
.Xr ort_parse_file 3 ,
and finalised with
.Xr ort_parse_close 3 .
It must be freed with
.Xr ort_config_free 3 .
.Bl -tag -width Ds -offset indent
.It Va struct strctq sq
A non-empty queue of structures.
.It Va struct enmq eq
A possibly-empty queue of user-defined enumerations.
.It Va struct bitfq bq
A possibly-empty queue of user-defined bitfields.
.It Va struct roleq rq
A possibly-empty queue of roles.
If empty, role-sensitive code should not be produced.
.It Va char **langs
All languages used by the exported labels.
.It Va size_t langsz
Number of pointers in
.Va langs .
If zero, there are no languages exported.
.It Va char **fnames
Filenames of parsed configurations.
These should only be used for reporting.
.It Va size_t fnamesz
The number of pointers in
.Va fnames .
.It Va struct msg *msgs
Warnings and errors encountered during parse.
.It Va size_t msgsz
The number of structures in
.Fa msgs .
.El
.Pp
The central component of
.Vt struct config
is the queue of
.Vt struct strct .
These collectively represent the data, operations, and other properties.
It may be represented as an SQL table, a C structure, a TypeScript
class, or a JavaScript object.
.Bl -tag -width Ds -offset indent
.It Va char *name
The non-empty name of the structure.
It is unique (case insensitive) among all structures.
.It Va char *doc
If not
.Dv NULL ,
free-form documentation.
.It Va struct pos pos
Parse position.
.It Va struct field *rowid
If not
.Dv NULL ,
the row identifier field.
.It Va struct fieldq fq
A non-empty queue of fields.
.It Va struct searchq sq
A possibly-empty queue of queries.
Queries are used to extract data.
.It Va struct aliasq aq
A possibly-empty queue of aliases.
Aliases are used when generating SQL.
This structure may be removed in the future.
.It Va struct updateq uq
A possibly-empty queue of update statements.
Updates are used to modify data.
.It Va struct updateq dq
A possibly-empty queue of delete statements.
Updates are used to modify (delete) data.
.It Va struct uniqueq nq
A possibly-empty queue of unique statements.
These are used to specify data uniqueness among multiple fields.
(Individual fields may be marked unique on their own.)
.It Va struct rolemapq rq
A possibly-empty queue of role assignments defined for this strutcure.
.It Va struct insert *ins
If not
.Dv NULL ,
the insert statement for the structure.
Inserts are used to create data.
.It Va struct rolemap *arolemap
If not
.Dv NULL ,
the role assignment for
.Em all
operations.
These assignments are merged into all per-operation roles: it's not
necessary to also check this member when checking per-operation roles.
.It Va unsigned int flags
Useful bits (or zero) set on the structure:
.Dv STRCT_HAS_QUEUE
if any list queries are defined,
.Dv STRCT_HAS_ITERATOR
if any iterator queries are defined,
.Dv STRCT_HAS_BLOB
if any blob fields are defined, and
.Dv STRCT_HAS_NULLREFS
if any reference structures can be null.
.It Va struct config *cfg
The configuration containing the structure.
.El
.Ss Data
The data of
.Vt struct strct
is defined by its queue of
.Vt struct field .
It may be represented as a column in an SQL table, a field of a C
structure, or a member of a JavaScript object.
.Bl -tag -width Ds -offset indent
.It Va char *name
The non-empty name of the field.
It is unique (case insensitive) among other fields in the structure.
.It Va struct ref *ref
This is set for
.Dv FTYPE_STRUCT
fields or references to other structures.
Otherwise it is
.Dv NULL .
.It Va struct enm *enm
Set for
.Dv FTYPE_ENUM
fields to the enumeration.
Otherwise it is
.Dv NULL .
.It Va struct bitf *bitf
Set for
.Dv FTYPE_BITFIELD
fields to the bitfield.
Otherwise it is
.Dv NULL .
.It Va char *doc
If not
.Dv NULL ,
free-form documentation.
.It Va struct pos pos
Parse point.
.It Va <anon union> def
An anonymous union with the default value of the field.
This consists of
.Va int64_t integer
for a default integer type (one of
.Dv FTYPE_DATE ,
.Dv FTYPE_BIT ,
.Dv FTYPE_BITFIELD ,
.Dv FTYPE_EPOCH ,
.Dv FTYPE_INT ) ,
.Va double decimal
for a default real value
.Dv FTYPE_REAL ,
.Va char *string
for a default string type (one of
.Dv FTYPE_EMAIL
or
.Dv FTYPE_TEXT ) ,
or
.Va struct eitem *eitem
for a default enumeration.
.It Va enum ftype type
Type type of the data.
.It Va enum upact actdel
For references to other structures, behaviour to take for when the
referenced data is deleted.
This may be one of
.Dv UPACT_NONE
for not specifying a delete handler,
.Dv UPACT_RESTRICT
for inhibiting the default,
.Dv UPACT_NULLIFY
for nullifying the field,
.Dv UPACT_CASCADE
from propogating changes to the field, or
.Dv UPACT_DEFAULT
for the default behaviour.
.It Va struct rolemap *rolemap
If not
.Dv NULL ,
role assignments for not exporting this field.
.It Va enum upact actup
For references to other structures, behaviour to take for when the
referenced data is updated.
See
.Va actdel
for a list of possible scenarios.
.It Va struct strct *parent
Link to parent structure.
.It Va struct fvalidq fvq
A possibly-empty queue of validators.
If data is being inserted or updated, it must conform to the validators.
.It Va unsigned int flags
A bit-field consisting of
.Dv FIELD_ROWID
if being the structure's unique row identifier (only available for
.Dv FTYPE_INT ) ,
.Dv FIELD_UNIQUE
if a unique field within the structure,
.Dv FIELD_NULL
if the field may be null,
.Dv FIELD_NOEXPORT
if the field may not be exported ever, and
.Dv FIELD_HASDEF
if the field has a default type-specific value set.
.El
.Pp
The user-defined enumerations in
.Va eq
limit integer types to specific values.
Its
.Vt struct enm
is defined as follows:
.Bl -tag -width Ds -offset indent
.It Va char *name
The non-empty name of the enumeration.
It is unique (case insensitive) among all enumerations and bit-fields.
.It Va char *doc
If not
.Dv NULL ,
free-form documentation.
.It Va struct pos pos
Parse position.
.It Va struct eitemq eq
Non-empty list of all enumeration values.
.El
.Pp
Each enumeration has a non-empty list of
.Vt struct eitem
that define the enumeration's values.
.Bl -tag -width Ds -offset indent
.It Va char *name
The non-empty name of the enumeration item.
It is unique (case insensitive) among other items in the enumeration.
.It Va int64_t value
The value less than
.Dv INT64_MAX
and greater than
.Dv INT64_MIN .
It is unique among other items in the enumeration.
.It Va char *doc
If not
.Dv NULL ,
free-form documentation.
.It Va struct labelq labels
A possibly-empty list of exported labels describing the item.
.It Va struct pos pos
Parse position.
.It Va struct enm *parent
The encompassing enumeration.
.It Va unsigned int flags
Flags.
May be set to
.Dv EITEM_AUTO
if the
.Va value
was assigned dynamically.
Dynamic assignment occurs after parsing and works by taking the maximum
assigned value (bound below at zero), adding one, then assigning and
adding one in the order of declaration.
.El
.Pp
The label queue of
.Vt struct label
is exported, so its contents must be considered public.
It consists of names for each item.
.Bl -tag -width Ds -offset indent
.It Va char *label
The non-empty free-form label.
It may not contain the
.Qq <
left right-angle bracket.
.It Va size_t lang
Language index in
.Va lang
of
.Vt struct config .
.It Va struct pos pos
Parse position.
.El
.Pp
The user-defined bit-field
.Vt struct bitf
is similar to an enumeration:
.Bl -tag -width Ds -offset indent
.It Va char *name
The non-empty name of the bit-field.
It is unique (case insensitive) among other bit-fields and enumerations.
.It Va char *doc
If not
.Dv NULL ,
free-form documentation.
.It Va struct labelq labels_unset
A possibly-empty list of exported labels for formatting if the bit-field
has no bits set.
.It Va struct labelq labels_null
A possibly-empty list of exported labels for formatting if the bit-field
is null.
.It Va struct pos pos
Parse position.
.It Va struct bitidxq bq
A non-empty queue of bit values.
.El
.Pp
The bit-field is composed of multiple
.Vt struct bitidx
bits that are recognised by the application.
.Bl -tag -width Ds -offset indent
.It Va char *name
The non-empty name of the bit.
It is unique (case insensitive) among other bits in the bit-field.
.It Va char *doc
If not
.Dv NULL ,
free-form documentation.
.It Va struct labelq labels
A possibly-empty list of exported labels for formatting the bit.
.It Va int64_t values
The bit itself inclusive of 0\(en63.
.It Va struct bitf *parent
The parent bit-field structure.
.It Va struct pos pos
Parse position.
.El
.Ss Role-based Access Control
The role-based access control of the system is defined by
.Vt struct role .
If the
.Va rq
queue in the top-level
.Vt struct config
is empty, there are no roles defined.
(This should not change a generated API.)
Roles are hierarchical, so the roles in
.Vt struct config
are top-level roles.
Roles inherit the operations (defined by
.Vt struct rolemap )
available to the parent.
.Bl -tag -width Ds -offset indent
.It Va char *name
The non-empty name of the role.
It is unique (case insensitive) among other roles.
.It Va char *doc
If not
.Dv NULL ,
free-form documentation.
.It Va struct role *parent
The parent role.
If
.Dv NULL ,
this is a top-level role.
.It Va struct roleq subrq
A possibly-empty queue of inheriting roles.
.It Va struct pos pos
Parse position.
.El
.Pp
One or more role are assigned to operations or data with
.Vt struct rolemap .
.Bl -tag -width Ds -offset indent
.It Va struct rrefq rq
The non-empty roles that are to be assigned.
Roles are hierarchical, so each role's descendents are implicitly mapped
to the given operation as well.
.It Va enum rolemapt type
The type of operation to be assigned.
This may be one of
.Dv ROLEMAP_ALL ,
which is an alias for all types
.Em except
.Dv ROLEMAP_NOEXPORT ;
.Dv ROLEMAP_COUNT ,
.Dv ROLEMAP_ITERATE ,
.Dv ROLEMAP_LIST ,
and
.Dv ROLEMAP_SEARCH
for queries;
.Dv ROLEMAP_DELETE
for deletions;
.Dv ROLEMAP_UPDATE
for updates;
.Dv ROLEMAP_INSERT
for insertions; and
.Dv ROLEMAP_NOEXPORT
for making specific fields unexportable to the role.
.It Va struct strct *parent
The structure for which the assignment is applicable.
.It Va struct field *f
If
.Dv ROLEMAP_NOEXPORT ,
the field that shouldn't be exported.
.It Va struct search *s
If
.Dv ROLEMAP_COUNT ,
.Dv ROLEMAP_ITERATE ,
.Dv ROLEMAP_LIST ,
or
.Dv ROLEMAP_SEARCH ,
the query to receive the assignment.
.It Va struct update *u
If
.Dv ROLEMAP_DELETE
or
.Dv ROLEMAP_UPDATE ,
the deletion or update to receive the assignment.
.El
.Ss Queries
Data may be extracted by using queries.
These are defined for each
.Vt struct strct .
The foundation for all queries is
.Vt struct search ,
which is used for all types of query.
.Bl -tag -width Ds -offset indent
.It Va struct sentq sntq
A possibly-empty queue of the search constraints.
An empty queue exists if searching for everything.
.It Va struct ordq ordq
A possibly-empty queue of how to order the results.
.It Va struct aggr *aggr
If not
.Dv NULL ,
how to aggregate search results.
This is used with
.Va group .
.It Va struct group *group
If not
.Dv NULL ,
the field that is used for grouping results.
This field's contents must be unique among the results, with the choice
of which object to use for the unique result being set by
.Vt aggr .
.It Va struct pos pos
Parse point.
.It Va struct dstnct *dst
If not
.Dv NULL ,
only return distinct results of a reference within the query.
It may be set to the current structure.
.It Va char *name
A non-empty name unique (case insensitive) among other queries of this
type or
.Dv NULL
to have an automatically-generated name.
.It Va char *doc
If not
.Dv NULL ,
free-form documentation.
.It Va struct strct *parent
Parent containing the query.
.It Va enum stype type
Type of query.
This may be
.Dv STYPE_COUNT
to return only the count of results,
.Dv STYPE_SEARCH
to query for a single result,
.Dv STYPE_LIST
to return all results, or
.Dv STYPE_ITERATE
to provide a callback to iterate over results.
.It Va int64_t limit
Zero or a limit to the returned results.
.It Va int64_t offset
Zero or the offset of when to start returning results.
.It Va struct rolemap *rolemap
If not
.Dv NULL ,
roles allowed to perform this query.
.It Va unsigned int flags
This may be only
.Dv SEARCH_IS_UNIQUE
if the query will return a single result.
(That is, it queries unique values.)
.El
.\" The following requests should be uncommented and used where appropriate.
.\" .Sh CONTEXT
.\" For section 9 functions only.
.\" .Sh RETURN VALUES
.\" For sections 2, 3, and 9 function return values only.
.\" .Sh ENVIRONMENT
.\" For sections 1, 6, 7, and 8 only.
.\" .Sh FILES
.\" .Sh EXIT STATUS
.\" For sections 1, 6, and 8 only.
.Sh EXAMPLES
The following parses standard input and repeats the parsed, canonicalised
configuration on standard output.
.Bd -literal -offset indent
struct config *cfg;

if ((cfg = ort_config_alloc()) == NULL)
	err(1, NULL);
if (!ort_parse_file(cfg, stdin, "<stdin>");
	errx(1, "ort_parse_file");
if (!ort_parse_close(cfg))
	errx(1, "ort_parse_close");
if (!ort_write_file(stdout, cfg))
	errx(1, "ort_write_file");

ort_config_free(cfg);
.Ed
.\" .Sh DIAGNOSTICS
.\" For sections 1, 4, 6, 7, 8, and 9 printf/stderr messages only.
.\" .Sh ERRORS
.\" For sections 2, 3, 4, and 9 errno settings only.
.\" .Sh SEE ALSO
.\" .Xr foobar 1
.\" .Sh STANDARDS
.\" .Sh HISTORY
.\" .Sh AUTHORS
.\" .Sh CAVEATS
.\" .Sh BUGS
