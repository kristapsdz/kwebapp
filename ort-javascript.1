.\"	$OpenBSD$
.\"
.\" Copyright (c) 2017--2019 Kristaps Dzonsons <kristaps@bsd.lv>
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.Dd $Mdocdate$
.Dt ORT-JAVASCRIPT 1
.Os
.Sh NAME
.Nm ort-javascript
.Nd produce ort JavaScript and TypeScript classes
.Sh SYNOPSIS
.Nm ort-javascript
.Op Fl t
.Op Ar config...
.Sh DESCRIPTION
The
.Nm
utility accepts
.Xr ort 5
.Ar config
files, defaulting to standard input,
and creates JavaScript or TypeScript classes that format the JSON
produced by
.Xr ort-c-header 1
.Fn json_xxxx
functions.
Its arguments are as follows:
.Bl -tag -width Ds
.It Fl t
Emits Typescript instead of JavaScript.
.It Ar config
Configuration files in
.Xr ort 5
syntax.
.El
.Pp
Output consists of a set of classes within the
.Qq ort
namespace describing structures, enumerations, and bitfields.
The method for acquiring the JSON is not managed by
.Nm ,
but is usually AJAX requests to a
.Xr ort-c-header 1
CGI interface.
.Pp
To use the API, include the generated file as a script in your HTML,
parse objects from the JSON exported by
.Xr ort-c-header 1 ,
and invoke the applicable object's
.Fn fill ,
.Fn fillByClass ,
.Fn fillInner ,
.Fn fillInnerByClass ,
.Fn fillArray ,
.Fn fillArrayOrHide ,
and
.Fn fillArrayOrShow ,
methods with a DOM tree node.
.Pp
These methods fill data from the JSON into the DOM tree by operating on
elements having specific classes.
In the following, let
.Qq foo
by the name of a structure in the
.Ar config
and
.Qq xxxx
be any of its fields.
.Bl -tag -width Ds
.It Li foo-xxxx-bits-checked
Sets or unsets the
.Li checked
attribute depending upon whether the input's
.Li value
attribute (if found) is covered by the object's bitmask.
Only applicable to bit types.
.It Li foo-xxxx-date-text
Replaces the contents of the element with the ISO 8601 date of the
object's value.
Only applicable to date and epoch types.
.It Li foo-xxxx-date-value
Sets the
.Li value
attribute to the ISO 8601 date of the object's value.
Only applicable to date and epoch types.
.It Li foo-xxxx-enum-select
All
.Li <option>
descendents of the element are marked as
.Qq selected
or not depending upon whether their value matches the field value.
.It Li foo-xxxx-obj
For structures, creates and invokes the
.Fn fillInner
method on the nested structure at the given element and its descendents.
This is only applicable for structure types.
.It Li foo-xxxx-text
Replaces the contents of the element with the field value.
This is not applicable to blob native types.
.It Li foo-xxxx-value
Sets the
.Li value
attribute (as in a form submission) with the field value.
This is not applicable to blob native types.
.It Li foo-xxxx-value-checked
Sets or unsets the
.Li checked
attribute depending upon whether the input's
.Li value
attribute matches the objects.
This is not applicable to blob or structure types.
.It Li foo-has-xxxx
Remove the
.Dq hide
class if the object is null, otherwise add the
.Dq hide
class.
.It Li foo-no-xxxx
Add the
.Dq hide
class if the object is null, otherwise remove the
.Dq hide
class.
.El
.Pp
The
.Fn fillInner
and
.Fn fillInnerByClass
methods may be used to exclude the passed-in root element, while
.Fn fill
and
.Fn fillByClass
include this element.
.Pp
The
.Fn fillArray ,
.Fn fillArrayOrHide ,
and
.Fn fillArrayOrShow
methods invoke
.Fn fill
repeatedly over an array of objects by removing, then subsequently
cloning and appending, the first element of the give DOM root.
The show and hide variants perform additional labour, usually to show a
message that elements have not or (more rarely) have been found.
.Pp
Enumeration and bitfield classes are also generated from the input file.
These are appended to the namespace as a series of classes
consisting of static variables assigned the enumeration value.
.Pp
All output files are fully documented in the
.Xr jsdoc 1
format.
.Ss Customisation
All functions accept an optional argument for providing custom per-field
or per-structure callbacks.
Keys in the object must consist of the structure name, followed by a
dash, followed by the field name.
For example, assuming a structure
.Dq client
with a field
.Dq dob
consisting of a UNIX epoch:
.Bd -literal -offset indent
var custom = { 'client-dob': formatDate };
new ort.client(obj).fillInner(document.body, custom);
.Ed
.Pp
And letting a formatting function be:
.Bd -literal -offset indent
function formatDate(e, name, value) {
  var list, i;
  list = e.getElementsByClassName('client-dob-date-moment');
  for (i = 0; i < list.length; i++)
    list[i].innerHTML =
      moment.unix(value).format('DD-MM-YYYY'));
}
.Ed
.Pp
This invokes the
.Dq moment.js
formatter to create dates.
.Pp
The same can be applied to structures instead of to fields within
structures.
The keys for these are simply the structure name.
.Bd -literal -offset indent
var custom = { 'client': formatClient };
new ort.client(obj).fillInner(document.body, custom);
.Ed
.Pp
The callback will then be provided the full client object.
.Pp
In either case, the value for the custom key may also be an array of
functions just as above.
Each will be invoked in the order given, in the same way.
.Bd -literal -offset indent
var custom = { 'client': [ format1, format2 ] };
.Ed
.Pp
The callback function (or functions) will be invoked regardless of
whether the value has been set.
In the event of an unset field value, the function is passed
.Dv null .
.Pp
When using TypeScript, the values of the format function are typed
according to the structure or field passed.
For example, if the
.Dq dob
field of structure
.Dq client
is a UNIX epoch, the format function accepts a number or null.
.Bd -literal -offset indent
function formatDate(e: HTMLElement,
  name: string, v: number|null): void {
	/* Do something... */
}
.Ed
.Pp
The dictionary object is defined as follows:
.Bd -literal -offset indent
let custom: DataCallbacks = { 'client-dob': formatDate };
new ort.client(obj).fillInner(document.body, custom);
.Ed
.Ss Enumeration and Bitfield Labels
Enumerations and bitfields in
.Xr ort 5
are translated into classes with a static
.Fn format
function that may be passed as a custom handler for corresponding
fields.
These fill in the
.Xr ort 5
.Cm jslabel
of the corresponding values.
If a language is specified in the root of the HTML or XML document, it
is first matched to the language of the label.
If there is no language, or none for that label, the default label is
used.
If there is no default label, an empty string is used instead.
.Pp
In the event of unset bitfields, the corresponding
.Xr ort 5
.Cm isunset
value is used, and the
.Li kwbp-unset
class set on the element.
For null values,
.Cm isnull
is used and
.Li kwbp-null
set on the element.
.Pp
For example, to fill in the label of an enumeration
.Li enum someenum
on a field named
.Li val ,
provide a custom callback.
.Bd -literal -offset indent
var obj = JSON.parse(response);
var e = document.getElementById('foo');
var custom = {
  'foo-val': ort.someenum.format
};
new ort.foo(obj).fill(e, custom);
.Ed
.\" The following requests should be uncommented and used where appropriate.
.\" .Sh CONTEXT
.\" For section 9 functions only.
.\" .Sh RETURN VALUES
.\" For sections 2, 3, and 9 function return values only.
.\" .Sh ENVIRONMENT
.\" For sections 1, 6, 7, and 8 only.
.\" .Sh FILES
.Sh EXIT STATUS
.Ex -std
.Sh EXAMPLES
Start with a means to contact a CGI script producing JSON data formatted
by the
.Fn json_xxxx
family of
.Xr ort-c-header 1 .
This does not do any error checking.
.Bd -literal
function init(): void
{
  let xmh: XMLHttpRequest = new XMLHttpRequest();
  xmh.onreadystatechange = function(){
    let v: string = xmh.responseText;
    if (xmh.readyState === 4 && xmh.status === 200)
        success(v);
  };
  xmh.open('GET', 'https://your-cgi-script, true);
  xmh.send(new FormData(form));
}
.Ed
.Pp
Now define
.Fn success
to parse the JSON response content using the classes and methods defined
in the output of
.Nm .
.Bd -literal
function success(resp: string): void
{
    let obj: ort.fooData = 
        <ort.fooData>JSON.parse(resp);
    new ort.foo(obj).fill(document.getElementById('place'));
}
.Ed
.Pp
Lastly, use the following abbreviated HTML in which to display the
contents of these objects.
Let
.Pa driver.js
consist of the AJAX snippet and formatter and
.Pa foo.s
be the output of
.Nm .
.Bd -literal
<!DOCTYPE html>
<html lang="en">
    <head>
      <title>Example</title>
      <script src="foo.js"></script>
      <script src="driver.js"></script>
    </head>
    <body>
        <div id="place">
            <span class="foo-xxxx-text>
                Replaced by the "text" field.
            </span>
        </div>
    </body>
</html>
.Ed
.Pp
Finally, to drive the script, cause
.Fn init
to be invoked when the page has loaded.
This may be in
.Pa driver.js
or directly in the document header.
.Bd -literal
window.addEventListener('load', init);
.Ed
.\" .Sh DIAGNOSTICS
.\" For sections 1, 4, 6, 7, 8, and 9 printf/stderr messages only.
.\" .Sh ERRORS
.\" For sections 2, 3, 4, and 9 errno settings only.
.Sh SEE ALSO
.Xr jsdoc 1 ,
.Xr ort-c-header 1 ,
.Xr ort-c-source 1 ,
.Xr tsc 1 ,
.Xr ort 5
.\" .Sh STANDARDS
.\" .Sh HISTORY
.\" .Sh AUTHORS
.\" .Sh CAVEATS
.Sh BUGS
This most significant issue with JavaScript and
.Nm
is that of JSON/JavaScript incompatibility.
In
.Nm ,
as exported in JSON, all integers are signed and 64 bits.
JavaScript (and of course TypeScript) encode integers as double
precision floats, which leave than 64 bits of precision.
Therefore, it's very possible to transmit valid numbers and have them be
truncated by JavaScript interpreters.
.Pp
There is as yet no simple way to protect against this.
While some aspects (like enumeration values) may be limited to 32 bits,
raw data emitted by the system is prone to truncation.
