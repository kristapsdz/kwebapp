<!DOCTYPE html>
<html>
	<head>
		<meta name="viewport" content="initial-scale=1.0, user-scalable=no" />
		<meta charset="utf-8" /> 
		<title>kwebapp | web application source generator</title>
		<link rel="stylesheet" href="highlight.css" />
		<link rel="stylesheet" href="index.css" />
		<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" />
		<link rel="stylesheet" href="https://code.cdn.mozilla.net/fonts/fira.css" />
	</head>
	<body lang="en">
		<header>
			<h1>kwebapp</h1> &#8212; web application source generator
		</header>
		<article>
			<p>
				<span class="nm">kwebapp</span> is an <a href="https://opensource.org/licenses/ISC">open source</a> system
				generating the database API in C and SQL for your web application.
				It accepts a configuration file that describes the <q>business logic</q> of your data: tables
				(structures), fields (members), accessors, and so forth.
				It then generates the source files you can include into your application.
				The output uses <a href="https://kristaps.bsd.lv/ksql">ksql(3)</a> as a wrapper for
				the underlying <a href="https://sqlite.org">SQLite</a> database.
				<span class="nm">kwebapp</span> is built to be fitted within a Makefile, just like your sources.
				It has no compile-time or run-time dependencies, and is a <a href="https://www.bsd.lv">BSD.lv</a> project.
			</p>
			<figure>
				<img src="index.svg" alt="" />
				<figcaption>
					Compilation sequence from configuration to output.
				</figcaption>
			</figure>
			<p>
				Consider the following <a href="kwebapp.5.html">kwebapp(5)</a> configuration file, <a href="db.txt.html">db.txt</a>.
				It defines two objects, a <code>user</code> and a <code>session</code>, and establishes a relation between the
				session and the user.
				Each session, in this example, has a link to a user keyed by the <code>userid</code> field.
			</p>
			<article data-sblg-permlink="0" data-sblg-article="1"></article>
			<p>
				When passed through <a href="kwebapp.1.html">kwebapp(1)</a>, this generates the following C header file, <a
					href="db.h.html">db.h</a>.
				The header file defines the C structures relating to each configured object and declares the functions necessary
				to acquire and release from the underlying SQLite database.
				Internally, the generated C code (<a href="db.c.html">db.c</a>) will perform the proper <q>inner join</q> logic on the objects.
				The documentation is created by the system.
			</p>
			<article data-sblg-permlink="0" data-sblg-article="1"></article>
			<p>
				By linking (and compiling) your application to the <a href="db.c.html">db.c</a> and the header file <a
					href="db.h.html">db.h</a>, you'll have a fully functional database backend without needing to worry
				about managing the SQL invocations.
			</p>
			<p>
				You can also manage your database directly by having <a href="kwebapp.1.html">kwebapp(1)</a> print out the database schema.
				Notice that some object fields, like the <code>user</code> structure inside of the section, are not part of the SQL.
				Rather, they are generated within <a href="db.c.html">db.c</a> using the foreign keys below.
			</p>
			<article data-sblg-permlink="0" data-sblg-article="1"></article>
		</article>
		<footer>
			Copyright &#xa9; 2017, <a href="mailto:kristaps@kcons.eu">Kristaps Dzonsons</a>
		</footer>
	</body>
</html>
