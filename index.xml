<!DOCTYPE html>
<html>
	<head>
		<meta name="viewport" content="initial-scale=1.0, user-scalable=no" />
		<meta charset="utf-8" /> 
		<title>kwebapp | web application source generator</title>
		<link rel="stylesheet" href="highlight.css" />
		<link rel="stylesheet" href="index.css" />
		<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" />
		<link rel="stylesheet" href="https://code.cdn.mozilla.net/fonts/fira.css" />
	</head>
	<body lang="en" itemscope="itemscope" itemtype="http://schema.org/SoftwareApplication">
		<header>
			<section id="breadcrumbs">
				<div><div>&#160;</div></div>
				<div>
					<div>
						BSD.lv tools for BCHS: 
						<a href="https://kristaps.bsd.lv/kcgi">kcgi</a>, 
						<a href="https://kristaps.bsd.lv/ksql">ksql</a>, 
						<a href="https://kristaps.bsd.lv/kwebapp">kwebapp</a>
					</div>
				</div>
				<div><div>&#160;</div></div>
			</section>
			<section id="header">
				<div>
					<h1 itemprop="name">kwebapp</h1> <span>&#8212; <span itemprop="description">web application source generator</span> @VERSION@</span>
				</div>
				<nav>
					<a href="https://github.com/kristapsdz/kwebapp">github</a>
					<a href="kwebapp.1.html">kwebapp(1)</a>
					<a href="kwebapp.5.html">kwebapp(5)</a>
					<a href="snapshots/kwebapp.tar.gz">source</a>
					<a href="snapshots">archive</a>
				</nav>
			</section>
		</header>
		<article>
			<section>
				<p>
					<span class="nm">kwebapp</span> is an <a href="https://opensource.org/licenses/ISC">open source</a> UNIX
					system generating front-end (JavaScript) and back-end (SQL, C) for your web application, leaving you to
					develop your business logic.
					It accepts a configuration file that describes your data: tables (structures), fields (members),
					accessors (search, list, iterate), modifiers (insert, update, delete), etc.
					It generates the source files (C header, C source, SQL schema, SQL update schema, JavaScript) for your
					application.
				</p>
				<p>
					Yes, C&#8212;as in <a href="https://learnbchs.org">BCHS</a>.
				</p>
				<figure>
					<img src="index.svg" alt="" />
					<figcaption>
						Compilation sequence from <a href="kwebapp.5.html">kwebapp(5)</a> configuration to output.
					</figcaption>
				</figure>
				<p>
					The system has no run-time dependencies; however, the generated C files use <a
						href="https://kristaps.bsd.lv/ksql">ksql(3)</a> as a wrapper for the underlying <a
						href="https://sqlite.org">SQLite</a> database.
					If optionally generating JSON formatters for exporting data (<b>-F</b><i>json</i>) or validation routines for HTML
					form input (<b>-F</b><i>valids</i>), you will also require <a href="https://kristaps.bsd.lv/kcgi">kcgi(3)</a>.
					The generated SQL file are for use by <a href="https://sqlite.org">SQLite</a>.
					The JavaScript files are <q><a href="http://vanilla-js.com/">vanilla</a></q> and have no framework
					dependencies.
				</p>
				<p>
					<span class="nm">kwebapp</span> is a <a href="https://www.bsd.lv">BSD.lv</a> project.
					For the time being, the C source output currently hardcodes OpenBSD-specific functions in its output
					(e.g., <a href="http://man.openbsd.org/crypt_newhash.3">crypt_newhash(3)</a> and so on).
					If you plan on using the system, please be aware of that!
					See the <a href="https://github.com/kristapsdz/kwebapp">GitHub repository</a> for issue tracking and
					versioning.
					To use <span class="nm">kwebapp</span>, just unpack, run <code>./configure</code>, <code>make</code>,
					then <code>make install</code>.
				</p>
			</section>
			<blockquote>
				<div>Latest release notes</div>
			</blockquote>
			<section id="versions">
				<nav data-sblg-nav="1" data-sblg-navsort="date" data-sblg-navtag="version" data-sblg-navsz="1" data-sblg-navcontent="1">
					<div>
						<time datetime="${sblg-datetime}">${sblg-date}</time>:
						version ${sblg-titletext}
					</div>
					<div>
						${sblg-aside}
					</div>
				</nav>
				<p>
					For previous releases, see the <a href="archive.html">version archive</a>.
				</p>
			</section>
			<blockquote>
				<div>cat -n <a href="db.txt.html">db.txt</a></div>
			</blockquote>
			<section>
				<p>
					Consider the following <a href="kwebapp.5.html">kwebapp(5)</a> configuration file, <a
						href="db.txt.html">db.txt</a>.
					It defines three objects&#8212;a <code>user</code>, <code>company</code>, and
					<code>session</code>&#8212;with relations between the three.
					Each <code>session</code>, in this example, has a link to a <code>user</code> keyed by the
					<code>userid</code> field.
					Then each <code>user</code> references a <code>company</code> by <code>cid</code>.
				</p>
				<p>
					The configuration is fairly readable: structures and fields, with field types and limits (string length
					or numeric value) and other options (nullity, whether a row identifier, etc.).
				</p>
				<article data-sblg-permlink="0" data-sblg-article="1"></article>
				<p>
					Beyond the objects themselves, I've also defined search functions, update functions, deletion functions,
					and so on for illustrative purposes.
					(A normal application would have more, but for brevity&#8230;)
					If your application has more specific queries to perform, it exports table schemas and <q>fill</q>
					functions to make it easy for customisation.
				</p>
				<p>
					We start by passing this configuration through <a href="kwebapp.1.html">kwebapp(1)</a> and generating
					the C source file (<a href="db.c.html">db.c</a>) and the C header file <a href="db.h.html">db.h</a>.
					We generate JSON output functions and <a href="https://kristaps.bsd.lv/kcgi">kcgi(3)</a> HTML input
					validation functions as well with <b>-F</b><i>json</i> and <b>-F</b><i>valids</i>, respectively.
				</p>
			</section>
			<blockquote>
				<div>kwebapp -Ocheader -Fvalids -Fjson <a href="db.txt.html">db.txt</a> &gt;<a href="db.h.html">db.h</a></div>
				<div>kwebapp -Ocsource -Fvalids -Fjson <a href="db.h.html">db.h</a> <a href="db.txt.html">db.txt</a> &gt;<a href="db.c.html">db.c</a></div>
			</blockquote>
			<section>
				<p>
					This invocation will generate source files built to be part of a web application chain.  On a modern <a
						href="https://www.openbsd.org">OpenBSD</a> system, this may be linked to sources driving a <a
						href="https://kristaps.bsd.lv/kcgi">kcgi(3)</a> CGI script.
					Each function and structure in the header file is documented thoroughly.
					The source files are also documented (more sparsely) to guide developers in reading through the
					implementation.
				</p>
				<p>
					Note the <b>-static</b> in the following invocation, which is required for running CGI binaries within
					the default
					file-system jail on OpenBSD web servers (see <a href="http://man.openbsd.org/httpd.8">httpd(8)</a>,
					which I use as a reference web server).
				</p>
				<p>
					The required libraries are <b>-l</b><i>ksql</i> for the database routines,
					<b>-l</b><i>kcgijson</i> for the JSON output, and
					<b>-l</b><i>kcgi</i> for the input validation (and a library dependency for <b>-l</b><i>kcgijson</i>).
					The other libraries are dependencies on the former (<b>-l</b><i>sqlite3</i> and <b>-l</b><i>pthread</i>) and latter
					(<b>-l</b><i>z</i>).
					Obviously, I assume these are in the standard library path, though the third-party libraries will
					probably be in <b>-L</b><i>/usr/local/lib</i>, with headers in <b>-I</b><i>/usr/local/include</i>.
				</p>
			</section>
			<blockquote>
				<div>cc -static -o test main.c <a href="db.c.html">db.c</a> -lksql -lsqlite3 -lpthread -lkcgijson -lkcgi -lz</div>
			</blockquote>
			<section>
				<p>
					Applications not wishing to deal with input or output (for example, a management application or
					system daemon) should omit the <b>-F</b><i>json</i> and <b>-F</b><i>valids</i> flags.
					These can then be compiled without static linking (omitting <b>-static</b>) and the non-SQLite related
					libraries.
				</p>
				<p>
					To create the initial database, use the following invocation as documented in <a href="kwebapp.1.html">kwebapp(1)</a>.
					A feature I use a lot in <span class="nm">kwebapp</span> is to track differences in the database schema
					by using the <b>-O</b><i>sqldiff</i> flag.
					This allows me to double-check that upgrades to my database won't be incompatible.
					It also generates the correct invocations without having me fat-finger mistakes in the upgraded database.
				</p>
			</section>
			<blockquote>
				<div>kwebapp -Osql <a href="db.txt.html">db.txt</a> &gt;<a href="db.sql.html">db.sql</a></div>
				<div>kwebapp -Osqldiff <a href="db.old.txt.html">db.old.txt</a> <a href="db.txt.html">db.txt</a> &gt;<a href="db.update.sql.html">db.update.sql</a></div>
				<div>sqlite3 db.db &lt; <a href="db.sql.html">db.sql</a></div>
			</blockquote>
			<section>
				<p>
					Notice that some object fields, like the <code>user</code> structure inside of the section, are not part of the SQL.
					Rather, they are generated within <a href="db.c.html">db.c</a> using the foreign keys.
					Also note that the SQL schema file is thoroughly documented.
					I suggest using <a href="https://kristaps.bsd.lv/sqliteconvert/">sqliteconvert</a> if you'd like to
					browse the SQL documentation for any non-trivial application.
				</p>
				<p>
					In general, I'll use <b>-O</b><i>sql</i> when first generating the database, and <b>-O</b><i>sqldiff</i>
					when upgrading existing databases.
					There are times when the database changes radically, at which point I'll usually dump and manually update.
				</p>
				<p>
					The last part of the toolchain is to handle the output of <b>-F</b><i>json</i> in the browser itself.
					With <b>-O</b><i>javascript</i> flag, <a href="kwebapp.1.html">kwebapp(1)</a> will also generate JavaScript files to
					assist in filling in data for your front-end web application code.
				</p>
			</section>
			<blockquote>
				<div>kwebapp -Ojavascript <a href="db.txt.html">db.txt</a> &gt;<a href="db.js.html">db.js</a></div>
			</blockquote>
			<section>
				<p>
					The JavaScript is useful when fetching information from your CGI script that was produced with <b>-F</b><i>json</i>.
					It has an easy interface for replacing certain tags in your HTML DOM tree with data.
					All of this is documented using <a href="https://usejsdoc.org">jsdoc</a> notation.
					For example, consider the following:
				</p>
				<article data-sblg-permlink="0" data-sblg-article="1"></article>
				<p>
					A JavaScript file may invoke <code>new user(res).fill(document.getElementById('foobar'))</code>, where
					<code>res</code> is the JSON object parsed from an AJAX call to the CGI script.
				</p>
			</section>
			<blockquote>
				<div>Status as of version <i>@VERSION@</i></div>
			</blockquote>
			<section>
				<p>
					Below a list of features that I'd like to implement in coming versions.
				</p>
				<article data-sblg-permlink="0" data-sblg-article="1"></article>
			</section>
		</article>
		<footer>
			Copyright &#xa9; 2017, <a href="mailto:kristaps@kcons.eu">Kristaps Dzonsons</a>
		</footer>
	</body>
</html>
