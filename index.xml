<!DOCTYPE html>
<html>
	<head>
		<meta name="viewport" content="initial-scale=1.0, user-scalable=no" />
		<meta charset="utf-8" /> 
		<title>kwebapp | web application source generator</title>
		<link rel="alternate" href="atom.xml" type="application/atom+xml" title="kwebapp version feed" />
		<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" />
		<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Alegreya+Sans:400,400italic,500" />
		<link rel="stylesheet" href="highlight.css" />
		<link rel="stylesheet" href="index.css" />
	</head>
	<body lang="en" itemscope="itemscope" itemtype="http://schema.org/SoftwareApplication">
		<header>
			<section id="breadcrumbs">
				<div>
					<div>
						BSD.lv tools for <a href="https://learnbchs.org">BCHS</a>: 
						<a href="https://kristaps.bsd.lv/kcgi">kcgi</a>, 
						<a href="https://kristaps.bsd.lv/ksql">ksql</a>, 
						<a href="https://kristaps.bsd.lv/kwebapp">kwebapp</a>
					</div>
				</div>
			</section>
			<section id="header">
				<div>
					<h1 itemprop="name">kwebapp</h1> 
					<span>&#8212; 
						<span itemprop="description">web application source generator</span> 
						<nav data-sblg-nav="1" data-sblg-navsort="date" data-sblg-navtag="version" data-sblg-navsz="1" data-sblg-navxml="1">
							${sblg-titletext}
						</nav>
					</span>
				</div>
				<nav>
					<a href="https://github.com/kristapsdz/kwebapp">github</a>
					<a href="snapshots/kwebapp.tar.gz">source</a>
					<a href="snapshots">archive</a>
					<a href="atom.xml"><i class="fa fa-rss"></i></a>
				</nav>
			</section>
		</header>
		<article>
			<section>
				<p class="intro">
					<span class="nm">kwebapp</span> is an <a href="https://opensource.org/licenses/ISC">open source</a> UNIX
					<abbr title="rapid application development">RAD</abbr> tool generating front-end code
					(<strong>JavaScript</strong>, <strong>TypeScript</strong>) and back-end code (<strong>SQL</strong>,
					<strong>C</strong>) for your web application, leaving you to develop your <q>middle-tier</q> business
					and presentation logic.  It's designed for small to medium deployments.
				</p>
				<p>
					The system consists of a set of source generators, each accepting a single <a
						href="ort.5.html">ort(5)</a> configuration file that describes your data and how it is
					accessed, modified, created, deleted. 
				</p>
				<figure>
					<img src="index.svg" alt="" />
					<figcaption>
						Outputs generated by a <a href="ort.5.html">ort(5)</a> configuration.
					</figcaption>
				</figure>
				<p>
					Each source generator is available as a standalone program with a thorough manpage.
					All available source generators are as follows.
				</p>
				<section class="topics">
					<div class="topicbox">
						<div class="topic">
							Database generation: <a href="#gen-sql">SQL schema</a> (and <a href="#gen-sqldiff">schema
								upgrade</a> commands) for your SQLite database.
						</div>
						<div>
							<a href="kwebapp-sql.1.html">kwebapp-sql(1)</a>, 
							<a href="kwebapp-sqldiff.1.html">kwebapp-sqldiff(1)</a>
						</div>
					</div>
					<div class="topicbox">
						<div class="topic">
							Back-end <a href="#gen-c">C source code</a>&#8212;API and implementation&#8212;for
							manipulating and exporting from the database.
							This must be driven by your program code.
						</div>
						<div>
							<a href="kwebapp-c-source.1.html">kwebapp-c-source(1)</a>, 
							<a href="kwebapp-c-header.1.html">kwebapp-c-header(1)</a>
						</div>
					</div>
					<div class="topicbox">
						<div class="topic">
							Front-end <a href="#gen-js">JavaScript or TypeScript</a> source code populating HTML5 trees with
							exported data.
							This must be driven by your front-end code.
						</div>
						<div>
							<a href="kwebapp-javascript.1.html">kwebapp-javascript(1)</a>
						</div>
					</div>
					<div class="topicbox">
						<div class="topic">
							Internationalisation: <a href="#gen-xliff">translation files</a> for front-end JavaScript
							labels.
						</div>
						<div>
							<a href="kwebapp-xliff.1.html">kwebapp-xliff(1)</a>
						</div>
					</div>
					<div class="topicbox">
						<div class="topic">
							Security and accountability: <a href="#gen-audit">role audits</a> for studying the data
							accessable by user roles.
						</div>
						<div>
							<a href="ort-audit.1.html">ort-audit(1)</a>,
							<a href="ort-audit-json.1.html">ort-audit-json(1)</a>,
							<a href="ort-audit-gv.1.html">ort-audit-gv(1)</a>
						</div>
					</div>
				</section>
				<p>
					Seen from the flow of information to and from the browser, <span class="nm">kwebapp</span> (or your
					build process) manages all of the data in grey.
					The only parts requiring authorship are in <span class="blue">blue</span>: the business logic (<q>your
						code</q>), the presentational material (<q>your presentation</q>&#8212;likely glue
					Java/TypeScript, HTML5, and CSS), and your <a href="ort.5.html">ort(5)</a> configuration itself.
					For simplicity, this assumes an un-translated data store.
				</p>
				<figure>
					<img src="index2.svg" alt="" />
				</figure>
				<p>
					These programs have no run-time dependencies; however, the generated C files use <a
						href="https://kristaps.bsd.lv/ksql">ksql(3)</a> as a wrapper for the underlying <a
						href="https://sqlite.org">SQLite</a> database, and often require
					<a href="https://kristaps.bsd.lv/kcgi">kcgi(3)</a> when generating validators and output formatters.
					<strong>You will need the newest version of the dependency libraries.</strong>
					Sources output by <span class="nm">kwebapp</span> use features from the newest releases:
					all of these tools are being built in tandem.
					Generated JavaScript and TypeScript files are <q><a href="http://vanilla-js.com/">vanilla</a></q> and
					have no framework dependencies.
				</p>
				<p>
					See the <a href="https://github.com/kristapsdz/kwebapp">GitHub repository</a> for issue tracking and
					versioning.
					To use <span class="nm">kwebapp</span>, just unpack, run <code>./configure</code>, <code>make</code>,
					then <code>make install</code>.
					<span class="nm">kwebapp</span> is a <a href="https://www.bsd.lv">BSD.lv</a> project.
				</p>
				<nav data-sblg-nav="1" data-sblg-navsort="date" data-sblg-navtag="version" data-sblg-navsz="1" data-sblg-navcontent="1">
					<h3>
						Latest release: ${sblg-titletext}
					</h3>
					<time>
						<i class="fa fa-clock-o"></i> 
						${sblg-date}
					</time>
					<div>
						${sblg-aside}
					</div>
				</nav>
				<p class="archive">
					For previous releases, see the <a href="archive.html">version archive</a>.
				</p>
			</section>
			<h2>
				parse and validate configuration
			</h2>
			<code>
				% <a href="ort.1.html">ort</a> <a href="db.txt.html">db.txt</a>
			</code>
			<section class="special">
				<figure>
					<img src="index-fig1.svg" />
				</figure>
				<div>
					<p>
						Consider an example <a href="ort.5.html">ort(5)</a> configuration <a
							href="db.txt.html">db.txt</a>.
						It defines three data objects&#8212;a <code>user</code>, <code>company</code>, and
						<code>session</code>&#8212;with relations between the three.
						Each <code>session</code> refers to a <code>user</code> by the <code>userid</code> field.
						Then each <code>user</code> refers to a <code>company</code> by its <code>cid</code>.
					</p>
					<p>
						The configuration is fairly readable: structures and fields, with field types and limits (string length
						or numeric value) and other options (nullity, whether a row identifier, etc.).
						Beyond the data itself, each objects defines search, update, and deletion functions.
						(A normal application would have more, but for brevity&#8230;)
					</p>
					<p>
						The <a href="ort.1.html">ort(1)</a> utility parses and validates the configuration.
						To <em>do</em> something with this configuration, we need to have code.
						Most applications start by creating an API from the data configuration as described in the next section.
						<em>Note</em>: this validation is superfluous, as all other compilation processes will do the same.
					</p>
				</div>
			</section>
			<h2 id="gen-c">
				generate back-end code
			</h2>
			<code>
				<div>
					% <a href="kwebapp-c-header.1.html">kwebapp-c-header</a> -jv 
					<a href="db.txt.html">db.txt</a> &gt; <a href="db.h.html">db.h</a>
				</div>
				<div>
					% <a href="kwebapp-c-source.1.html">kwebapp-c-source</a> -jv 
					-h <a href="db.h.html">db.h</a> <a href="db.txt.html">db.txt</a> &gt; <a href="db.c.html">db.c</a>
				</div>
			</code>
			<section class="special">
				<figure>
					<img src="index-fig2.svg" />
				</figure>
				<div>
					<p>
						This generates source and header files to be linked to sources (usually) driving a <a
							href="https://kristaps.bsd.lv/kcgi">kcgi(3)</a> CGI script.
						Each function and structure in the header file is documented thoroughly.
						The source files are also documented (more sparsely) to guide developers in reading through the
						implementation.
					</p>
					<p>
						The C source file is generated for the target architecture, so it's not guaranteed to be
						portable between operating systems.
					</p>
					<p>
						You can break apart C headers and sources into the database routines, JSON export, validation,
						and so on.
						For smaller applications, it's generally easiest to have them in one.
						I break apart the routines when I have several applications, e.g., a CGI script and a <a
							href="https://man.openbsd.org/cron">cron(8)</a> job for period e-mails.
						This allows the non-CGI applications not to link to CGI bits.
					</p>
				</div>
			</section>
			<h2>
				compile back-end code
			</h2>
			<code>
				% cc -static -o test main.c <a href="db.c.html">db.c</a> -lksql -lsqlite3 -lpthread -lkcgijson -lkcgi -lz
			</code>
			<section>
				<p>
					The <b>-static</b> is for simplicity when running CGI scripts in a file-system jail.
				       	This is the default operation on OpenBSD web servers (see <a href="http://man.openbsd.org/httpd.8">httpd(8)</a>,
					which I use as a reference web server).
				</p>
				<p>
					The required libraries are <b>-l</b><i>ksql</i> for the database routines,
					<b>-l</b><i>kcgijson</i> for the JSON output, and
					<b>-l</b><i>kcgi</i> for the input validation (and a library dependency for <b>-l</b><i>kcgijson</i>).
					The other libraries are dependencies on the former (<b>-l</b><i>sqlite3</i> and <b>-l</b><i>pthread</i>) and latter
					(<b>-l</b><i>z</i>).
					Obviously, I assume these are in the standard library path, though the third-party libraries will
					probably be in <b>-L</b><i>/usr/local/lib</i>, with headers in <b>-I</b><i>/usr/local/include</i>.
				</p>
				<p>
					On some machines, you may additionally need <b>-l</b><i>crypt</i> (for password hashing) and
					<b>-l</b><i>m</i> (for <b>-l</b><i>kcgijson</i>).
				</p>
			</section>
			<h2 id="gen-sql">
				generate and initialise database
			</h2>
			<code>
				<div>
					% <a href="kwebapp-sql.1.html">kwebapp-sql</a>
					<a href="db.txt.html">db.txt</a> &gt; <a href="db.sql.html">db.sql</a>
				</div>
				<div>
					% sqlite3 db.db &lt; <a href="db.sql.html">db.sql</a>
				</div>
			</code>
			<section class="special">
				<figure>
					<img src="index-fig3.svg" />
				</figure>
				<div>
					<p>
						That some object fields, like the <code>user</code> structure inside of the section, are not
						part of the SQL.
						Rather, they are generated within <a href="db.c.html">db.c</a> using the foreign keys.
						But for the most part, all structure items map into database columns.
					</p>
					<p>
						The SQL schema file is thoroughly documented.
						I suggest using <a href="https://kristaps.bsd.lv/sqliteconvert/">sqliteconvert</a> if you'd like to
						browse the SQL documentation for any non-trivial application.
					</p>
				</div>
			</section>
			<h2 id="gen-sqldiff">
				update database
			</h2>
			<code>
				<div>
					% <a href="kwebapp-sqldiff.1.html">kwebapp-sqldiff</a>
					<a href="db.old.txt.html">db.old.txt</a> <a href="db.txt.html">db.txt</a> &gt; <a href="db.update.sql.html">db.update.sql</a>
				</div>
				<div>
					% sqlite3 db.db &lt; <a href="db.sql.html">db.update.sql</a>
				</div>
			</code>
			<section class="special">
				<figure>
					<img src="index-fig3.svg" />
				</figure>
				<div>
					<p>
						A feature I use a lot in <span class="nm">kwebapp</span> is to track differences in the database schema
						by using <a href="kwebapp-sqldiff.1.html">kwebapp-sqldiff(1)</a>.
						This allows me to double-check that upgrades to my database won't be incompatible.
						It also generates the correct invocations without having me fat-finger mistakes in the upgraded database.
					</p>
					<p>
						Update scripts should always be perused for correctness.
						They currently don't handle default values, so columns not accepting <code>null</code> will not
						pass through the database application.
					</p>
				</div>
			</section>
			<h2 id="gen-js">
				generate javascript front-end
			</h2>
			<code>
				<div>
					% <a href="kwebapp-javascript.1.html">kwebapp-javascript</a>
					<a href="db.txt.html">db.txt</a> &gt; <a href="db.js.html">db.js</a>
				</div>
				<div>
					% <a href="kwebapp-javascript.1.html">kwebapp-javascript</a> -t
					<a href="db.txt.html">db.txt</a> &gt; <a href="db.ts.html">db.ts</a>
				</div>
			</code>
			<section class="special">
				<figure>
					<img src="index-fig5.svg" />
				</figure>
				<div>
					<p>
						The last part of the toolchain is to handle the JSON-export output in the browser itself.
						The <a href="kwebapp-javascript.1.html">kwebapp-javascript(1)</a> tool will also generate
						JavaScript or TypeScript files to assist in filling in data for your front-end web application
						code.
					</p>
					<p>
						Both are the same, and provide an easy interface for replacing elements (noted by class names)
						in your HTML DOM tree with data.
						All of this is documented using <a href="https://usejsdoc.org">jsdoc</a> notation.
						For example, consider the following:
					</p>
					<article data-sblg-permlink="0" data-sblg-article="1"></article>
					<p>
						A JavaScript file may invoke <code>new kwebapp.user(res).fill(document.getElementById('foobar'))</code>, where
						<code>res</code> is the JSON object parsed from an AJAX call to the CGI script.
						This will recursively replace text (classes ending with <code>-text</code>), fill in input
						values, and allow for extensive customisation.
					</p>
				</div>
			</section>
			<h2 id="gen-xliff">
				translate javascript labels
			</h2>
			<code>
				<div>
					% <a href="kwebapp-xliff.1.html">kwebapp-xliff</a>
					<a href="db.txt.html">db.txt</a> &gt; <a href="db.fr.xml.html">db.fr.xml</a>
				</div>
				<div>
					% <a href="kwebapp-xliff.1.html">kwebapp-xliff</a> -j
					<a href="db.txt.html">db.txt</a> <a href="db.fr.xml.html">db.fr.xml</a> &gt; <a href="db.trans.txt.html">db.trans.txt</a>
				</div>
			</code>
			<section class="special">
				<figure>
					<img src="index-fig6.svg" />
				</figure>
				<div>
					<p>
						The <a href="kwebapp-javascript.1.html">kwebapp-javascript(1)</a> tool is capable of filling in
						labels of exported enumeration and bitfield values.
						For example, if an exported field is of the <code>enum foo</code> type, and the enumeration's
						items have <code>jslabel</code> tags, integral enumeration values can be programmatically
						converted to the labels by invoking the <code>kwebapp.foo.format()</code> method as a custom
						callback.
					</p>
					<p>
						These strings may be translated by using the <a href="kwebapp-xliff.1.html">kwebapp-xliff(1)</a>
						utility, which extracts translatable strings into the industry-standard <a
							href="http://docs.oasis-open.org/xliff/v1.2/os/xliff-core.html">XLIFF 1.2</a> format.
						The translation files may then be merged back into the configuration file, with the output piped
						into <a href="kwebapp-javascript.1.html">kwebapp-javascript(1)</a>, for a full translation sequence.
					</p>
				</div>
			</section>
			<h2 id="gen-audit">
				audit role-based access
			</h2>
			<code>
				% <a href="ort-audit.1.html">ort-audit</a>
				<a href="audit-example.txt.html">audit-example.txt</a> user
			</code>
			<section>
				<p>
					We can audit <a href="https://learnbchs.org/rbac.html">role-based access control</a> access with <a
						href="ort-audit.1.html">ort-audit(1)</a>, <a
						href="ort-audit-json.1.html">ort-audit-json(1)</a>, and <a
						href="ort-audit-gv.1.html">ort-audit-gv(1)</a>.
					By passing a role defined in the configuration to <a href="ort-audit.1.html">ort-audit(1)</a>,
					we're able to see the full availability of data and operations available to the role.
				</p>
				<p>
					In the example role-backed <a href="audit-example.txt.html">audit-example.txt</a> with roles
					<code>user</code> and <code>admin</code>, for example, we can fully audit for the <code>user</code> role
					as seen in the exemplar <a href="audit.html">audit.html</a>.
					We create with <a href="ort-audit-json.1.html">ort-audit-json(1)</a>.
					This visualisation breaks down access by structures (the foundational objects of <a
						href="ort.5.html">ort(5)</a>) and then grouped by operation.
				</p>
			</section>
		</article>
		<footer>
			Copyright &#xa9; 2017&#8211;2018, <a href="https://github.com/kristapsdz">Kristaps Dzonsons</a>
		</footer>
	</body>
</html>
