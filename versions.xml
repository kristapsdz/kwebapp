<?xml version="1.0" encoding="UTF-8" ?>
<!-- vim: set tw=100: -->
<articles>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.6.10</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2018-12-27">2018-12-27</time>
		</header>
		<aside>
			<p>
				Add the string concatenation operator (<code>concat</code>) for 
				updating fields.
				Put in more support for running on musl libc.
				(Work in progress.)
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.6.9</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2018-12-09">2018-12-09</time>
		</header>
		<aside>
			<p>
				TypeScript now errors out if <code>NodeListOf</code> is used instead
				of <code>HTMLCollectionOf</code>, so use the proper invocation.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.6.8</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2018-12-06">2018-12-06</time>
		</header>
		<aside>
			<p>
				Forgot to zero some allocated memory in <code>unique</code> statements.
				Found with valgrind.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.6.7</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2018-12-03">2018-12-03</time>
		</header>
		<aside>
			<p>
				Allow <a href="kwebapp-sqldiff.1.html">kwebapp-sqldiff(1)</a> to
				optionally produce <q>drop table</q> commands.
			</p>
			<p>
				Fix that custom handlers are invoked for null values if null values
				are allowed by the configuration.
			</p>
			<p>
				Add <code>fillArrayByClass</code>, which is like
				<code>fillArray</code> but invoked over matching classes.
			</p>
			<p>
				Begin migration (internally) to new name, <i>openradtool</i>.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.6.6</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2018-11-23">2018-11-23</time>
		</header>
		<aside>
			<p>
				Add the <code>fillArrayOrHide</code>, <code>fillArrayOrShow</code>,
				<code>fillByClass</code>, and <code>fillInnerByClass</code> methods
				to the TypeScript and JavaScript output.
				The former two captures common uses of <code>fillArray</code>:
				hiding or showing an element if there are non-zero elements in the
				given array.
				The latter are convenience methods of wrapping a <code>fill</code>
				invocation with a <code>getElementsByClassName</code>.
			</p>
			<p>
				Make custom callbacks in the JavaScript/TypeScript output override
				the defaults, instead of coming beforehand.
				Document this behaviour.
				(Before, the order was unspecified.)
			</p>
			<p>
				Re-organise internals for better library support.
				The library isn't exported, but may be (and is) used.
				No functional change.
			</p>
			<p>
				Make <code>default</code> keyword be handled when emitted
				configurations.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.6.5</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2018-11-02">2018-11-02</time>
		</header>
		<aside>
			<p>
				Add <code>default</code> support for text, emails, and dates.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.6.4</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2018-10-23">2018-10-23</time>
		</header>
		<aside>
			<p>
				Make sure that <a href="https://kristaps.bsd.lv/ksql">ksql(3)</a> is
				configured for foreign keys.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.6.3</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2018-10-09">2018-10-09</time>
		</header>
		<aside>
			<p>
				Take <code>unique</code> statements into account when warning
				whether a <code>search</code> statement might return multiple
				results.
				Also add some examples for using <code>unique</code>.
			</p>
			<p>
				Fix a crash in <a href="kwebapp-xliff.1.html">kwebapp-xliff(1)</a>.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.6.2</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2018-09-28">2018-09-28</time>
		</header>
		<aside>
			<p>
				<i>Same as 0.6.1 except a small fix for packaging.
					Below is the message from 0.6.1</i>.
			</p>
			<p>
				Add ability to convert <i>from</i> JSON back into objects.
				This uses <a
					href="https://github.com/zserge/jsmn">jsmn</a>,
				as it's simple, fast, and easy to bundle directly into the sources.
				See the <code><b>-J</b></code> flag in 
				<a href="kwebapp-c-header.1.html">kwebapp-c-header(1)</a> and
				<a href="kwebapp-c-source.1.html">kwebapp-c-source(1)</a> for details.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.6.1</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2018-09-26">2018-09-26</time>
		</header>
		<aside>
			<p>
				Add ability to convert <i>from</i> JSON back into objects.
				This uses <a
					href="https://github.com/zserge/jsmn">jsmn</a>,
				as it's simple, fast, and easy to bundle directly into the sources.
				See the <code><b>-J</b></code> flag in 
				<a href="kwebapp-c-header.1.html">kwebapp-c-header(1)</a> and
				<a href="kwebapp-c-source.1.html">kwebapp-c-source(1)</a> for details.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.6.0</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2018-09-06">2018-09-06</time>
		</header>
		<aside>
			<p>
				Allow configuration files to be broken apart for several applications.
				Now, all <span class="nm">kwebapp</span> utilities may be invoked
				with multiple files per configuration.
				This has made <a href="kwebapp-sqldiff.1.html">kwebapp-sqldiff(1)</a>
				and <a href="kwebapp-xliff.1.html">kwebapp-xliff(1)</a> have
				slightly awkward syntax for many-many invocations, 
				but the usual UNIX conventions of standard input and option parsing
				are respected.
				The existing calling convention is also still usable.
			</p>
			<p>
				For <a href="kwebapp-sqldiff.1.html">kwebapp-sqldiff(1)</a>,
				introduce the concept of a default value that's used in <code>ALTER
					TABLE</code> statements for new columns.
				This currently is only defined for number types.
				The default is documented in <a href="kwebapp.5.html">kwebapp(5)</a>.
			</p>
			<p>
				Rename <code>xxx-yyy-date</code> to <code>xxx-yyy-date-value</code>
				for consistency (oops!), then add <code>xxx-yyy-date-text</code>.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.5.7</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2018-08-25">2018-08-25</time>
		</header>
		<aside>
			<p>
				Have several new class recognised in <code>fill</code> methods as
				generated by <a
					href="kwebapp-javascript.1.html">kwebapp-javascript(1)</a>.
				The <code>xxx-yyy-bits-checked</code> is now recognised for
				<code>bit</code> and <code>bits</code> types and it will check input
				boxes whose value is covered by the field's value.
				The <code>xxx-yyy-date</code>, for ISO 8601 formatting of
				<code>epoch</code> and <code>date</code> types.
				Lastly, <code>xxx-yyy-value-checked</code> for checking general
				input boxes matching input values.
			</p>
			<p>
				All of these is documented in the manpage and in the output jsdoc.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.5.6</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2018-08-04">2018-08-04</time>
		</header>
		<aside>
			<p>
				Fix TypeScript generation for enumerations.
				Invert logic for language selection so that language not found gets
				default.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.5.5</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2018-08-04">2018-08-04</time>
		</header>
		<aside>
			<p>
				Significantly update the TypeScript functionality of <a
					href="kwebapp-javascript.1.html">kwebapp-javascript(1)</a>:
				stipulate callback function types for the custom format handler.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.5.4</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2018-08-02">2018-08-02</time>
		</header>
		<aside>
			<p>
				Allow for updating translation files with <b>-u</b>.
				See <a href="kwebapp-xliff.1.html">kwebapp-xliff(1)</a> for details.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.5.3</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2018-07-27">2018-07-27</time>
		</header>
		<aside>
			<p>
				Allow a copy mode <b>-c</b> in <a
					href="kwebapp-xliff.1.html">kwebapp-xliff(1)</a>.
				Also don't allow tags (the &lt; character) in <code>jslabel</code> phrases.
				Fix specifying language <code>jslabel</code> for special phrases in <code>bits</code>.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.5.2</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2018-07-23">2018-07-23</time>
		</header>
		<aside>
			<p>
				Full translation capabilities!
				Now all <code>jslabel</code> strings may be translated out-of-band
				into the appropriate <code>jslabel.xxx</code> labels using the
				industry-standard XLIFF 1.2 format.
				Just use <a href="kwebapp-xliff.1.html">kwebapp-xliff(1)</a> to
				extract translatable strings, edit the content, then merge with the
				original configuration.
				The output can then be piped into <a
					href="kwebapp-javascript.1.html">kwebapp-javascript(1)</a>
				for dynamic per-language formatting!
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.5.1</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2018-06-26">2018-06-26</time>
		</header>
		<aside>
			<p>
				Clean up <code>make</code> output by putting version information
				into its own header file.
			</p>
			<p>
				Continue adding in TypeScript type information.
			</p>
			<p>
				Multi-language support: re-tool the <code>jslabel</code> feature to
				allow for multiple languages that detect the HTML (or XML)
				document's root language and only produce output for that language.
				This uses the <code>jslabel.lang</code> syntax.
				Also warn more about missing labels and be clearer on what to do
				when label information isn't found.
				Furthermore, the <code>unset</code> keyword has been changed to
				<code>isunset</code> and the <code>isnull</code> keyword has also been added.
				There is no longer a hard-coded <q>not given</q> value, and the
				class set on null values is now <code>kwbp-null</code> instead of
				<code>notgiven</code>.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.5.0</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2018-06-21">2018-06-21</time>
		</header>
		<aside>
			<p>
				Hello, Linux!
				The system now supports compiling on Linux and other non-OpenBSD systems.
				This has been enabled by bringing up to date with <a
					href="https://github.com/kristapsdz/oconfigure">oconfigure</a>
				and adding portability shims for password hashing and other tools.
			</p>
			<p>
				I'm also pleased to announce <a
					href="https://www.typescriptlang.org/">TypeScript</a>
				integration in <a href="kwebapp-javascript.1.html">kwebapp-javascript(1)</a>.
				This is still under development, but now exports proper TypeScript
				classes, interfaces, and so on.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.4.10</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2018-05-24">2018-05-24</time>
		</header>
		<aside>
			<p>
				Several fixes to having split-apart header files.
				Fix (and harmonise) the behaviour of <b>-N</b> in both
				<a href="kwebapp-c-header.1.html">kwebapp-c-header(1)</a> and
				<a href="kwebapp-c-source.1.html">kwebapp-c-source(1)</a>, and
				<b>-I</b> in the latter.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.4.9</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2018-05-09">2018-05-09</time>
		</header>
		<aside>
			<p>
				Bring up to date with <a
					href="https://github.com/kristapsdz/oconfigure">oconfigure</a>
				and also use newest safety mechanisms (the <q>result</q> interface)
				from <a href="https://kristaps.bsd.lv/ksql">ksql</a>.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.4.8</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2018-04-27">2018-04-27</time>
		</header>
		<aside>
			<p>
				Repair header inclusion (<span class="file">kcgijson.h</span>
				requires <span class="file">kcgi.h</span>) for <a
					href="kwebapp-c-source.1.html">kwebapp-c-source(1)</a>.
				Bring up to date with newest <a
					href="https://kristaps.bsd.lv/ksql">ksql</a>, which requires
				the default role have permission to open the database.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.4.7</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2018-03-13">2018-03-13</time>
		</header>
		<aside>
			<p>
				Set the configuration script's modes properly and fix the auditing
				HTML sample and fix the installation archive to include all files.
				Make the audit markup (and CSS) be easily embedded into other files.
			</p>
			<p>
				Split <a href="kwebapp-audit.1.html">kwebapp-audit(1)</a> into <a
					href="kwebapp-audit-json.1.html">kwebapp-audit-json(1)</a>
				and add the new <a
					href="kwebapp-audit-gv.1.html">kwebapp-audit-gv(1)</a> for
				brief <a href="https://www.graphviz.org/">GraphViz</a> output.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.4.6</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2018-03-10">2018-03-10</time>
		</header>
		<aside>
			<p>
				Fully switch over to <a
					href="https://kristaps.bsd.lv/ksql">ksql(3)</a>'s roles for
				database management.
				Also add <code>KWBP_VERSION</code> and <code>KWBP_VSTAMP</code> to
				the header file.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.4.5</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2018-02-15">2018-02-15</time>
		</header>
		<aside>
			<p>
				Significantly expand the auditing capability to show both the export
				and access to data.
				Before, the concepts were too closely linked.
				Now, both the JSON and non-JSON output are careful to note which
				data is simply accessable, and which may be exported as well (and
				via which paths through the code).
			</p>
			<p>
				Also fix code output by non-role-based systems.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.4.4</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2018-01-30">2018-01-30</time>
		</header>
		<aside>
			<p>
				Fix the <code>noexport</code> empty statement, which was causing
				assertions when invoked in certain situations.
				Also start using <a
					href="https://kristaps.bsd.lv/ksql">ksql(3)</a>'s stored
				statement functionality, which improves security.
				Add partial support for roles within ksql(3) as well, but leave them
				unimplemented for the time being.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.4.3</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2018-01-17">2018-01-17</time>
		</header>
		<aside>
			<p>
				Fix <a
					href="https://github.com/kristapsdz/kwebapp/issues/2">issues/2</a>,
				allowing limits, offsets, and orderings to come after an empty
				<q>WHERE</q> statement.
			</p>
			<p>
				Allow <code>noexport</code> in a structure's roles to accept an
				empty name, which indicates that no fields should be exported.
			</p>
			<p>
				Significantly chop the size of the output JavaScript file from
				<a href="kwebapp-javascript.1.html">kwebapp-javascript(1)</a>.
				Reduction of nearly 40% from the file size of the last version!
				This is a savings in code size along&#8212;the bulk of the files
				are often comments.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.4.2</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2017-12-27">2017-12-27</time>
		</header>
		<aside>
			<p>
				Support auto-numbering of enumerations.
				The scheme is to start at the maximum assigned number plus one or
				zero, whichever is greater, and assign incrementally in order of
				appearance.
			</p>
			<p>
				Add the <code>date</code> pseudo-type that aliases
				<code>epoch</code> but uses the date validation input.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.4.1</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2017-12-26">2017-12-26</time>
		</header>
		<aside>
			<p>
				Fix: <code>LIMIT</code> set goes after <code>ORDER BY</code>.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.4.0</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2017-12-20">2017-12-20</time>
		</header>
		<aside>
			<p>
				Split <a href="kwebapp.1.html">kwebapp(1)</a> into <a
					href="kwebapp-c-header.1.html">kwebapp-c-header(1)</a>, <a
					href="kwebapp-c-source.1.html">kwebapp-c-source(1)</a>, <a
					href="kwebapp-javascript.1.html">kwebapp-javascript(1)</a>,
				<a href="kwebapp-sql.1.html">kwebapp-sql(1)</a>, and <a
					href="kwebapp-sqldiff.1.html">kwebapp-sqldiff(1)</a>.
				The historical calling conventions of using <a
					href="kwebapp.1.html">kwebapp(1)</a> with output flags is no
				longer accepted.
			</p>
			<p>
				Add <a href="kwebapp-audit.1.html">kwebapp-audit(1)</a>.
				This tool allows configurations to be audited for role permissions.
				It effectively takes a configuration and determines all possible
				access (data access, modify, etc.) available to a given role and
				produces a report.
				Reports can be on the command-line or JSON.
				A sample implementation of the JSON file is installed.
			</p>
			<p>
				Allow for <code>comment</code> strings to be associated with roles.
			</p>
			<p>
				The audit functionality is part of a project generously funded by
				CAPEM Solutions, Inc.
				Thank you!
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.3.9</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2017-12-06">2017-12-06</time>
		</header>
		<aside>
			<p>
				Allow for <code>update</code> and <code>delete</code> to operate
				without constraints.
				See <a href="kwebapp.5.html">kwebapp(5)</a> for syntax.
				Also add transaction call-through functions to the generated C API.
				This is necessary in role-based mode since the underlying
				<a href="https://kristaps.bsd.lv/ksql">ksql</a> API is shielded.
				These are documented in <a href="kwebapp.1.html">kwebapp(1)</a>.
			</p>
			<p>
				Fix a crash when having <code>limit</code> statements with
				<code>enum</code> types.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.3.8</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2017-11-24">2017-11-24</time>
		</header>
		<aside>
			<p>
				Lift the restriction on alias counts (total number of inner joins)
				from 26 to 17576.
				This can easily be expanded further: the limitation is purely for
				simplicity's sake.
			</p>
			<p>
				Add the <code>distinct</code> field to queries.
				This field, in its basic form, enforced the SQL
				<code>DISTINCT</code> keyword.
				However, it can also be used for nested fields in a structure,
				effectively only returning distinct rows of nested structures.
				The canonical example is returning only distinct album fields that
				are <code>struct</code> foreign key references of a track table.
				All of this is documented in <a
					href="kwebapp.5.html">kwebapp(5)</a>.
			</p> 
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.3.7</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2017-11-23">2017-11-23</time>
		</header>
		<aside>
			<p>
				Bug-fixes in created C code to account for line-breaking long SQL
				statements.
				(This is an in-progress effort.)
				Also add the <code>unset jslabel</code> statement for bit-fields.
				This allows the generated JavaScript <code>format()</code> function
				to provide a value if the field exists but has not been set with any
				bits.
				(This is yet to be documented for <a
					href="kwebapp.1.html">kwebapp(1)</a> as the feature is still
				experimental.)
			</p> 
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.3.6</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2017-11-18">2017-11-18</time>
		</header>
		<aside>
			<p>
				Lots of new features!
				Add the <code>order</code> statement for ordering <code>list</code>
				and <code>iterate</code> results.
				It can also act as a way to define single results over non-unique
				fields by combining the <code>search</code> statement with
				<code>limit</code>.
				Allow for limit offsets by extending the <code>limit</code> syntax.
				Lastly, introduce the <code>bit</code> bit index type and the
				<code>bits</code> top-level type for working with bit-fields.
				All of these are documented in <a href="kwebapp.5.html">kwebapp(5)</a>.
			</p> 
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.3.4</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2017-11-13">2017-11-13</time>
		</header>
		<aside>
			<p>
				Disallow duplicate <code>enum</code> and <code>struct</code> names.
				(These will otherwise collide in the C namespace.)
				Improve the documentation (function arguments) in the produced C
				header file.
				Output JavaScript <code>enum</code> values&#8212;this is described
				in <a href="kwebapp.1.html">kwebapp(1)</a>.
			</p> 
			<p> 
				Add the <code>and</code> and <code>or</code> logical (bit-wise)
				operations for search constraints.
			</p> 
			<p> 
				Finally allow comments!
				These begin at any time with the hash mark and continue to the end
				of line.
				(My motivation was modelines for vim.)
			</p> 
			<p> 
				Lastly, and the biggest, allow for having <code>struct</code> fields
				on <code>null</code> foreign keys.
				This requires the system to perform extra <code>SELECT</code>
				statements when the keys aren't <code>null</code> (which is noted in
				the generated API comments on a per-function basis), but overall
				it's very useful.
			</p> 
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.3.3</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2017-11-01">2017-11-01</time>
		</header>
		<aside>
			<p>
				Add the <code>like</code> operator type.
				This allows for primitive text searching.
				(This will become more advanced in time.)
				Allow the custom callback for JavaScript functions to optionally
				accept an array of functions for structure-field or structure in
				general.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.3.2</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2017-10-30">2017-10-30</time>
		</header>
		<aside>
			<p>
				Add the <code>bit</code> type to work with <a
					href="https://kristaps.bsd.lv/kcgi">kcgi</a>'s new bit
				validator.
				Fix the JavaScript output to propogate custom callbacks (see <a
					href="kwebapp.1.html">kwebapp(1)</a>) in the
				<code>fillArray</code> function.
				Lastly, add feature that allows an update <code>update</code>
				statement translate into updating all fields.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.3.1</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2017-10-27">2017-10-27</time>
		</header>
		<aside>
			<p>
				Repair the <a href="http://usejsdoc.org">jsdoc</a> by actually
				checking it.
				Also add custom callback handling for individual structure/fields.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.3.0</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2017-10-25">2017-10-25</time>
		</header>
		<aside>
			<p>
				Require the <code>insert</code> statement within a structure to
				generate insertion functions.
			</p>
			<p>
				Disambiguate the configuration grammar with respect to structure
				linking.
				Earlier, <code>struct</code> types could specify the linkage from
				another field to a foreign key.
				Now, the linkage must be specified within the other field itself.
				This clears up the situation where a structure and the referring
				field had different types.
				It also allows all foreign key information (e.g., <code>on
					delete</code> modifiers) to exist unambiguously on the
				referring field itself.
			</p>
			<p>
				Add the <code>actup</code> and <code>actdel</code> modifiers on a
				foreign key reference.
				For example, <code>actdel cascade</code> specifies <code>ON DELETE
					CASCADE</code>.
			</p>
			<p>
				Properly wrap comments (at word boundaries) at 70 columns.
			</p>
			<p>
				Introduce RBAC functionality: the <code>roles</code> top-level
				object defining the roles themselves such that each structure
				statement (e.g., <code>insert</code>) can be wrapped in a
				<code>roles</code> statement limiting access.
				When the top-level <code>roles</code> is defined (even if empty),
				the <code>ksql</code> database handle is hidden from the API, and
				instead an opaque <code>kwbp</code> is used.
				This allows for full role-based access to the database.
				Read the <a href="kwebapp.5.html">kwebapp(5)</a> for more
				information.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.2.12</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2017-09-18">2017-09-18</time>
		</header>
		<aside>
			<p>
				Bug-fix generated JavaScript.
				Also clarified some warnings and errors generated during the link phase.
				Lastly, inherit <code>CFLAGS</code> during configuration and use <b>-Wextra</b> during compilation.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.2.11</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2017-07-06">2017-07-06</time>
		</header>
		<aside>
			<p>
				Add more power to the JavaScript output and clarify its operation.
				First, clarify how the root DOM element is handled as to whether it can have classes to be filled in.
				(Yes.)
				Second, add a <code>fillInner()</code> function to handle cases where the root shouldn't be filled in.
				Finally, add a <code>fillArray</code> that fills from an array of objects.
				This removes the first element, clears the root element, then clones, fills in, and appends the first element
				for all objects.
				The <code>fillInner()</code> functionality comes in handy to protect nested objects from clobbering each other.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.2.10</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2017-07-05">2017-07-05</time>
		</header>
		<aside>
			<p>
				Fix a bug that crept into the last release where iterate/list terms with an empty constraint set resulted in a
				dangling <code>WHERE</code> in the generated SQL.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.2.9</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2017-07-04">2017-07-04</time>
		</header>
		<aside>
			<p>
				Allow iteration and listing to accept no terms; i.e., they produce all rows for that structure.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.2.8</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2017-06-29">2017-06-29</time>
		</header>
		<aside>
			<p>
				Allow <a href="https://kristaps.bsd.lv/ksql">ksql(3)</a>'s <q>split process</q> model to be used when
				-<b>F</b><i>splitproc</i> is specified.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.2.7</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2017-06-16">2017-06-16</time>
		</header>
		<aside>
			<p>
				Add <code>sqldiff</code> mode support for enumerations.
				This makes sure that enumeration objects are consistent (non-destructive) across configurations.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.2.6</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2017-06-15">2017-06-15</time>
		</header>
		<aside>
			<p>
				Add enumerations (<code>enum</code>) as top-level objects.
				This allows the C API to represent integers as sets of constants and makes validation more precise.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.2.5</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2017-06-12">2017-06-12</time>
		</header>
		<aside>
			<p>
				Add <code>eq</code> operator for validation.
				(Probably not used for numeric, but useful for strings in some circumstances.)
				Also add <code>email</code> type.
				This is just a string type with special validation.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.2.4</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2017-06-11">2017-06-11</time>
		</header>
		<aside>
			<p>
				Add the ability for <q>update</q> fields to accept a modifier.
				This translates into the SQL equivalent to <code>update foo set x = x + ?</code>.
				Right now, only the <code>inc</code> and <code>dec</code> modifiers are supported, but it's easy to add in new ones.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.2.3</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2017-05-30">2017-05-30</time>
		</header>
		<aside>
			<p>
				One-liner so that <q>unique</q> fields can be foreign keys (but not <q>struct</q>s).
				Also add the <q>epoch</q> native type that uses the <code>time_t</code> type for the C API.
				For OpenBSD with 64-bit signed integral time, this is just an alias for <code>int</code> except for the type
				in the API.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.2.2</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2017-05-25">2017-05-25</time>
		</header>
		<aside>
			<p>
				Fix bug in recursive reference checker.
				This now works properly and allows [properly] for self-referencing structures for native type references.
				Add special function to JSON print iterate entries.
				These work together with the iterate functions and accept their callback syntax.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.2.1</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2017-05-22">2017-05-22</time>
		</header>
		<aside>
			<p>
				Finally fix naming of anonymous query (search, list, iterate), update, and delete functions.
				This now uses the basic syntax of <code>db_xx_get_by_yy_op</code>, where <q>xx</q> is the structure, <q>yy</q>
				is the field, and <q>op</q> is the operation.
				Adding the <q>op</q> field disambiguates fields.
				(The operation also makes the earlier double-underscore unneeded.)
			</p>
			<p>
				Also add functions to print JSON arrays if and only if a structure has list iterators specified.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.2.0</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2017-05-20">2017-05-20</time>
		</header>
		<aside>
			<p>
				Flag day: use the <b>-O</b> flag to specify output type (hence minor bump).
				Also move <b>-v</b> and <b>-j</b> into <b>-F</b><i>valids</i> and <b>-F</b><i>json</i> as part of the new <b>-F</b> flag.
				This cleans up a lot of options and leaves the door open for new output formats and configuration options.
			</p>
			<p>
				Generate <a href="https://usejsdoc.org">jsdoc</a> along with the JavaScript <b>-O</b><i>javascript</i> output.
				Also handle the <code>foo-xxxx-value</code> class, where <q>foo</q> is the structure and <q>xxxx</q> is the
				field, for auto-population of form elements.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.1.9</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2017-05-19">2017-05-19</time>
		</header>
		<aside>
			<p>
				Introduce <b>-J</b>, which generates JavaScript output.
				This completes the chain from HTML form input to filling in HTML DOM trees with CGI script output.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.1.8</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2017-05-18">2017-05-18</time>
		</header>
		<aside>
			<p>
				Handle empty insertions by using <code>DEFAULT VALUES</code> on the insertion.
				Accept inequality operators for search, update, and delete constraints.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.1.7</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2017-05-15">2017-05-15</time>
		</header>
		<aside>
			<p>
				Add limit clauses to make validation more meaningful.
				(See the <b>limit</b> field clause in <a href="kwebapp.5.html">kwebapp(5)</a>.)
				Now input values can be limited.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.1.6</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2017-05-13">2017-05-13</time>
		</header>
		<aside>
			<p>
				Add full validation sequence required by <a href="https://kristaps.bsd.lv/kcgi">kcgi(3)</a>, specifically
				<code>khttp_parse(3)</code>.
				With this in place, applications can push the given structure directly into the HTTP parser without needing to
				create the array themselves.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.1.5</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2017-05-12">2017-05-12</time>
		</header>
		<aside>
			<p>
				Add field validation routines.
				See the <b>-v</b> flag in <a href="kwebapp.1.html">kwebapp(1)</a>.
				This uses the field type (and modifiers) to create 
				<a href="https://kristaps.bsd.lv/kcgi">kcgi(3)</a> validation routines.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.1.4</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2017-05-05">2017-05-05</time>
		</header>
		<aside>
			<p>
				Require a semicolon after <q>struct</q> statements.
				This is future-proofing for options following the <q>struct</q> data.
				Also added a <q>noexport</q> field option that disallows fields from being JSON-exported.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.1.3</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2017-05-04">2017-05-04</time>
		</header>
		<aside>
			<p>
				Handle empty (<q>null</q>) values as specified in the configuration when exporting to JSON.
				Also, properly handle blob values as base64-encoded strings.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.1.2</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2017-05-02">2017-05-02</time>
		</header>
		<aside>
			<p>
				Introduce <b>-j</b>, which also emits JSON output functions using <a
					href="https://kristaps.bsd.lv/kcgi">kcgi(3)</a>'s interface.
				These complete the chain of exporting data from a database directly to client applications.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.1.1</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2017-04-29">2017-04-29</time>
		</header>
		<aside>
			<p>
				Have the singleton search function (e.g., <q>search foo: name bar</q>) use the operator <q>get</q> in generated
				function names.
				Before, these would be (following the example) <code>db_foo_by_foo</code>.
				Now they're <code>db_foo_get_by_foo</code>.
				This is more consistent with the other search functions.
			</p>
			<p>
				Renamed the <b>-h</b> flag to <b>-C</b>.
				(Source in lowercase, header in uppercase.)
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.1.0</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2017-04-27">2017-04-27</time>
		</header>
		<aside>
			<p>
				Initial stable internals.
				I'm still going to change the generated API function names before adding features, but the system is already in
				use.
			</p>
		</aside>
	</article>
</articles>
