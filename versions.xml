<?xml version="1.0" encoding="UTF-8" ?>
<articles>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.3.0</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2017-09-18">2017-09-18</time>
		</header>
		<aside>
			<p>
				Disambiguate the configuration grammar with respect to structure linking.
				Earlier, <code>struct</code> types could specify the linkage from another field to a foreign key.
				Now, the linkage must be specified within the other field itself.
				This clears up the situation where a structure and the referring field had different types.
				It also allows all foreign key information (e.g., <code>on delete</code> modifiers) to exist unambiguously on
				the referring field itself.
			</p>
			<p>
				Add the <code>actup</code> and <code>actdel</code> modifiers on a foreign key reference.
				For example, <code>actdel cascade</code> specifies <code>ON DELETE CASCADE</code>.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.2.12</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2017-09-18">2017-09-18</time>
		</header>
		<aside>
			<p>
				Bug-fix generated JavaScript.
				Also clarified some warnings and errors generated during the link phase.
				Lastly, inherit <code>CFLAGS</code> during configuration and use <b>-Wextra</b> during compilation.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.2.11</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2017-07-06">2017-07-06</time>
		</header>
		<aside>
			<p>
				Add more power to the JavaScript output and clarify its operation.
				First, clarify how the root DOM element is handled as to whether it can have classes to be filled in.
				(Yes.)
				Second, add a <code>fillInner()</code> function to handle cases where the root shouldn't be filled in.
				Finally, add a <code>fillArray</code> that fills from an array of objects.
				This removes the first element, clears the root element, then clones, fills in, and appends the first element
				for all objects.
				The <code>fillInner()</code> functionality comes in handy to protect nested objects from clobbering each other.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.2.10</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2017-07-05">2017-07-05</time>
		</header>
		<aside>
			<p>
				Fix a bug that crept into the last release where iterate/list terms with an empty constraint set resulted in a
				dangling <code>WHERE</code> in the generated SQL.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.2.9</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2017-07-04">2017-07-04</time>
		</header>
		<aside>
			<p>
				Allow iteration and listing to accept no terms; i.e., they produce all rows for that structure.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.2.8</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2017-06-29">2017-06-29</time>
		</header>
		<aside>
			<p>
				Allow <a href="https://kristaps.bsd.lv/ksql">ksql(3)</a>'s <q>split process</q> model to be used when
				-<b>F</b><i>splitproc</i> is specified.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.2.7</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2017-06-16">2017-06-16</time>
		</header>
		<aside>
			<p>
				Add <code>sqldiff</code> mode support for enumerations.
				This makes sure that enumeration objects are consistent (non-destructive) across configurations.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.2.6</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2017-06-15">2017-06-15</time>
		</header>
		<aside>
			<p>
				Add enumerations (<code>enum</code>) as top-level objects.
				This allows the C API to represent integers as sets of constants and makes validation more precise.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.2.5</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2017-06-12">2017-06-12</time>
		</header>
		<aside>
			<p>
				Add <code>eq</code> operator for validation.
				(Probably not used for numeric, but useful for strings in some circumstances.)
				Also add <code>email</code> type.
				This is just a string type with special validation.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.2.4</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2017-06-11">2017-06-11</time>
		</header>
		<aside>
			<p>
				Add the ability for <q>update</q> fields to accept a modifier.
				This translates into the SQL equivalent to <code>update foo set x = x + ?</code>.
				Right now, only the <code>inc</code> and <code>dec</code> modifiers are supported, but it's easy to add in new ones.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.2.3</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2017-05-30">2017-05-30</time>
		</header>
		<aside>
			<p>
				One-liner so that <q>unique</q> fields can be foreign keys (but not <q>struct</q>s).
				Also add the <q>epoch</q> native type that uses the <code>time_t</code> type for the C API.
				For OpenBSD with 64-bit signed integral time, this is just an alias for <code>int</code> except for the type
				in the API.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.2.2</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2017-05-25">2017-05-25</time>
		</header>
		<aside>
			<p>
				Fix bug in recursive reference checker.
				This now works properly and allows [properly] for self-referencing structures for native type references.
				Add special function to JSON print iterate entries.
				These work together with the iterate functions and accept their callback syntax.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.2.1</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2017-05-22">2017-05-22</time>
		</header>
		<aside>
			<p>
				Finally fix naming of anonymous query (search, list, iterate), update, and delete functions.
				This now uses the basic syntax of <code>db_xx_get_by_yy_op</code>, where <q>xx</q> is the structure, <q>yy</q>
				is the field, and <q>op</q> is the operation.
				Adding the <q>op</q> field disambiguates fields.
				(The operation also makes the earlier double-underscore unneeded.)
			</p>
			<p>
				Also add functions to print JSON arrays if and only if a structure has list iterators specified.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.2.0</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2017-05-20">2017-05-20</time>
		</header>
		<aside>
			<p>
				Flag day: use the <b>-O</b> flag to specify output type (hence minor bump).
				Also move <b>-v</b> and <b>-j</b> into <b>-F</b><i>valids</i> and <b>-F</b><i>json</i> as part of the new <b>-F</b> flag.
				This cleans up a lot of options and leaves the door open for new output formats and configuration options.
			</p>
			<p>
				Generate <a href="https://usejsdoc.org">jsdoc</a> along with the JavaScript <b>-O</b><i>javascript</i> output.
				Also handle the <code>foo-xxxx-value</code> class, where <q>foo</q> is the structure and <q>xxxx</q> is the
				field, for auto-population of form elements.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.1.9</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2017-05-19">2017-05-19</time>
		</header>
		<aside>
			<p>
				Introduce <b>-J</b>, which generates JavaScript output.
				This completes the chain from HTML form input to filling in HTML DOM trees with CGI script output.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.1.8</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2017-05-18">2017-05-18</time>
		</header>
		<aside>
			<p>
				Handle empty insertions by using <code>DEFAULT VALUES</code> on the insertion.
				Accept inequality operators for search, update, and delete constraints.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.1.7</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2017-05-15">2017-05-15</time>
		</header>
		<aside>
			<p>
				Add limit clauses to make validation more meaningful.
				(See the <b>limit</b> field clause in <a href="kwebapp.5.html">kwebapp(5)</a>.)
				Now input values can be limited.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.1.6</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2017-05-13">2017-05-13</time>
		</header>
		<aside>
			<p>
				Add full validation sequence required by <a href="https://kristaps.bsd.lv/kcgi">kcgi(3)</a>, specifically
				<code>khttp_parse(3)</code>.
				With this in place, applications can push the given structure directly into the HTTP parser without needing to
				create the array themselves.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.1.5</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2017-05-12">2017-05-12</time>
		</header>
		<aside>
			<p>
				Add field validation routines.
				See the <b>-v</b> flag in <a href="kwebapp.1.html">kwebapp(1)</a>.
				This uses the field type (and modifiers) to create 
				<a href="https://kristaps.bsd.lv/kcgi">kcgi(3)</a> validation routines.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.1.4</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2017-05-05">2017-05-05</time>
		</header>
		<aside>
			<p>
				Require a semicolon after <q>struct</q> statements.
				This is future-proofing for options following the <q>struct</q> data.
				Also added a <q>noexport</q> field option that disallows fields from being JSON-exported.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.1.3</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2017-05-04">2017-05-04</time>
		</header>
		<aside>
			<p>
				Handle empty (<q>null</q>) values as specified in the configuration when exporting to JSON.
				Also, properly handle blob values as base64-encoded strings.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.1.2</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2017-05-02">2017-05-02</time>
		</header>
		<aside>
			<p>
				Introduce <b>-j</b>, which also emits JSON output functions using <a
					href="https://kristaps.bsd.lv/kcgi">kcgi(3)</a>'s interface.
				These complete the chain of exporting data from a database directly to client applications.
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.1.1</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2017-04-29">2017-04-29</time>
		</header>
		<aside>
			<p>
				Have the singleton search function (e.g., <q>search foo: name bar</q>) use the operator <q>get</q> in generated
				function names.
				Before, these would be (following the example) <code>db_foo_by_foo</code>.
				Now they're <code>db_foo_get_by_foo</code>.
				This is more consistent with the other search functions.
			</p>
			<p>
				Renamed the <b>-h</b> flag to <b>-C</b>.
				(Source in lowercase, header in uppercase.)
			</p>
		</aside>
	</article>
	<article data-sblg-article="1" data-sblg-tags="version">
		<header>
			<h3>0.1.0</h3>
			<address>Kristaps Dzonsons</address>
			<time datetime="2017-04-27">2017-04-27</time>
		</header>
		<aside>
			<p>
				Initial stable internals.
				I'm still going to change the generated API function names before adding features, but the system is already in
				use.
			</p>
		</aside>
	</article>
</articles>
