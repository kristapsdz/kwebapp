.\"	$OpenBSD: mdoc.template,v 1.15 2014/03/31 00:09:54 dlg Exp $
.\"
.\" Copyright (c) 2017 Kristaps Dzonsons <kristaps@bsd.lv>
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.Dd $Mdocdate: April 17 2017 $
.Dt KWEBAPP 1
.Os
.Sh NAME
.Nm kwebapp
.Nd create web application API and database layer
.Sh SYNOPSIS
.Nm kwebapp
.Op Fl hns
.Op Fl c Ar header
.Op Fl d Ar oldconfig
.Op Ar config
.Sh DESCRIPTION
The
.Nm
utility accepts a configuration file
.Ar config
.Pq defaulting to standard input
and creates source files defining a web application's C API to its
database.
It is a way of reducing the often-repeated code of serialising and
de-serialising simple structures from a database.
By default, it generates the C header file
.Pq see Fl h .
Its arguments are as follows:
.Bl -tag -width Ds
.It Fl c Ar header
Create the
.Sx C source
file implementing the header file
.Ar header .
.It Fl d Ar oldconfig
Generate an
.Sx SQL update
sequence that updates
.Ar oldconfig ,
a
.Xr kwebapp 5
file, with the new configuration.
.It Fl h
Create the
.Sx C header
file.
.It Fl n
Parse only (dry-run).
.It Fl s
Create the full
.Sx SQL schema
file.
.It Ar config
A configuration file in the
.Xr kwebapp 5
format.
.El
.Pp
In all instances (except for
.Fl n ) ,
the generated file is produced on standard output.
.Ss C header
The C header file generated by
.Nm
lists all structures and functions defined by
.Ar config .
Sources including the header will also need
.In ksql.h
.Po
see
.Xr ksql 3
for details
.Pc
and
.In stdint.h .
If any of your structures call for lists (see the
.Cm list
keyword in
.Xr kwebapp 5 ) ,
you'll need the
.In sys/queue.h
header as well.
.Pp
For each structure object in
.Ar config ,
.Nm
generates a C
.Dq struct
by that name containing all typed fields.
Moreover, if any of the fields are defined with
.Cm null ,
an additional field of
.Va has_xxxx
is defined, where
.Dq xxxx
is the name of the field.
This field will be non-zero if the field was not null during access;
otherwise it will be zero.
.Pp
If there are any list statements on the object, the structure has
queue macros created for it as well.
If there are any iterator statements, the function callback types are
also generated.
.Pp
The following functions are then generated per structure, letting
.Dq foo
to be the name of a sample structure object:
.Bl -tag -width Ds
.It Fn db_foo_by_xxxx
If the structure object has any named searches, these are listed in
place of the
.Dq xxxx .
The function accepts variables for all binary-operator fields to check
(i.e., all except for those checking for null).
.It Fn db_foo_by__xxxx__yy_zz
Like
.Fn db_foo_by_xxxx ,
but for nested structures.
These are listed with an undescore preceding each search term.
In the given example,
.Dq xxxx
is a field in the given structure and
.Dq yy_zz
means a field
.Dq zz
in the nested structure
.Dq yy .
.It Fn db_foo_fill
Zero and fill in a pointer from an open database query.
This fills all nested structures as well.
.It Fn db_foo_free
Frees a pointer returned by a unique search function.
.It Fn db_foo_freeq
Frees a queue (and its members) created by a listing function.
This function is produced only if there are listing statements on a
given structure.
.It Fn db_foo_insert
Insert a row and return its identifier.
This accepts all native fields as parameters excluding
.Cm rowid ,
which is automatically set by the database.
If any fields are specified as
.Cm null ,
they are passed into this functions as pointers.
The null values must then be specified as
.Dv NULL
pointers.
.It Fn db_foo_iterate_by_xxxx
Also like
.Fn db_foo_by_xxxx ,
but invoking a function callback within the active query for each
retrieved result.
.It Fn db_foo_iterate_by__xxxx__yy_zz
Like
.Fn db_foo_by__xxxx__yy_zz ,
but invoking a function callback for the retrieved results.
.It Fn db_foo_list_by_xxxx
Like
.Fn db_foo_by_xxxx ,
but producing a queue of responses.
.It Fn db_foo_list_by__xxxx__yy_zz
Like
.Fn db_foo_by__xxxx__yy_zz ,
but producing a queue of responses.
.It Fn db_foo_unfill
Release resources filled from a database query.
This frees all nested structures as well.
.It Fn db_foo_update_xxxx
Run the named update function
.Dq xxxx .
The update functions are specified with
.Cm update
statements.
The parameters passed to this function are first the fields to modify,
then the fields that constrain which rows are updated.
If any modified fields are specified as
.Cm null ,
they are passed into this functions as pointers.
Any null values must then be specified as
.Dv NULL
pointers.
Update fields are only specified for operations for binary-operator
constraints, i.e., those not checking for null status.
.It Fn db_foo_update_xx_by_yy
Like
.Fn db_foo_update_xxxx ,
but using an un-named update statement modifying
.Dq xx
constrained by
.Dq yy .
.El
.Pp
The convenience
.Fn db_open
and
.Fn db_close
functions are also provided.
These functions open and close a database in
.Dq safe exit
mode as documented in
.Xr ksql 3 .
The former also installs the default logging facilities.
.Pp
All of these are fully documented in the header file.
The structures are documented using the comments given in
.Ar config .
.Ss C source
A series of function definitions for the
.Sx C header .
This is internally documented to assist the reader.
.Ss SQL schema
Emits a series of
.Cm CREATE TABLE
SQL commands representing the objects in
.Ar config .
These encapsulate the foreign keys and all other required SQL
attributes.
.Ss SQL update
Emits a series of
.Cm CREATE TABLE
and
.Cm ALTER TABLE
SQL commands to update the configuration
.Ar oldconfig
to the new configuration
.Ar config .
.Pp
The configuration files are considered incompatible if they contain
destructive differences: dropped objects (structures or fields) or
different fields (types, references, attributes).
.\" The following requests should be uncommented and used where appropriate.
.\" .Sh CONTEXT
.\" For section 9 functions only.
.\" .Sh RETURN VALUES
.\" For sections 2, 3, and 9 function return values only.
.\" .Sh ENVIRONMENT
.\" For sections 1, 6, 7, and 8 only.
.\" .Sh FILES
.Sh EXIT STATUS
.\" For sections 1, 6, and 8 only.
.Ex -std
.Pp
In the case of
.Fl d ,
exiting >0 means that
.Ar oldconfig
and
.Ar config
are incompatible.
.\" .Sh EXAMPLES
.\" .Sh DIAGNOSTICS
.\" For sections 1, 4, 6, 7, 8, and 9 printf/stderr messages only.
.\" .Sh ERRORS
.\" For sections 2, 3, 4, and 9 errno settings only.
.Sh SEE ALSO
.Xr kwebapp 5
.\" .Sh STANDARDS
.\" .Sh HISTORY
.\" .Sh AUTHORS
.\" .Sh CAVEATS
.\" .Sh BUGS
